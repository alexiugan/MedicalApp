{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\react-demo\\\\src\\\\patient\\\\components\\\\patient-update-form.js\";\nimport React from 'react';\nimport validate from \"../../patient/components/validators/patient-validators\";\nimport Button from \"react-bootstrap/Button\";\nimport * as API_USERS from \"../../patient/api/patient-api\";\nimport APIResponseErrorMessage from \"../../commons/errorhandling/api-response-error-message\";\nimport { Col, Row } from \"reactstrap\";\nimport { FormGroup, Input, Label } from 'reactstrap';\n\nvar PatientUpdateForm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(PatientUpdateForm, _React$Component);\n\n  function PatientUpdateForm(props) {\n    var _this;\n\n    _classCallCheck(this, PatientUpdateForm);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PatientUpdateForm).call(this, props));\n\n    _this.handleChange = function (event) {\n      var name = event.target.name;\n      var value = event.target.value;\n      var updatedControls = _this.state.formControls;\n      var updatedFormElement = updatedControls[name];\n      updatedFormElement.value = value;\n      updatedFormElement.touched = true;\n      updatedFormElement.valid = validate(value, updatedFormElement.validationRules);\n      updatedControls[name] = updatedFormElement;\n      var formIsValid = true;\n\n      for (var updatedFormElementName in updatedControls) {\n        formIsValid = updatedControls[updatedFormElementName].valid && formIsValid;\n      }\n\n      _this.setState({\n        formControls: updatedControls,\n        formIsValid: formIsValid\n      });\n    };\n\n    _this.toggleForm = _this.toggleForm.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.reloadHandler = _this.props.reloadHandler;\n    _this.state = {\n      testpls: '',\n      errorStatus: 0,\n      error: null,\n      formIsValid: false,\n      formControls: {\n        oldName: {\n          value: '',\n          placeholder: '',\n          valid: false,\n          touched: false\n        },\n        name: {\n          value: '',\n          placeholder: '',\n          valid: false,\n          touched: false\n        },\n        gender: {\n          value: '',\n          placeholder: '',\n          valid: false,\n          touched: false\n        },\n        date: {\n          value: '',\n          placeholder: '',\n          valid: false,\n          touched: false\n        },\n        address: {\n          value: '',\n          placeholder: '',\n          valid: false,\n          touched: false\n        },\n        medicalRecord: {\n          value: '',\n          placeholder: '',\n          valid: false,\n          touched: false\n        },\n        caregiverID: {\n          value: '',\n          placeholder: '',\n          valid: false,\n          touched: false\n        },\n        medplanid: {\n          value: '',\n          placeholder: '',\n          valid: false,\n          touched: false\n        }\n      }\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(PatientUpdateForm, [{\n    key: \"toggleForm\",\n    value: function toggleForm() {\n      this.setState({\n        collapseForm: !this.state.collapseForm\n      });\n    }\n  }, {\n    key: \"registerPatient\",\n    value: function registerPatient(patient) {\n      var _this2 = this;\n\n      return API_USERS.postPatient(patient, function (result, status, error) {\n        if (result !== null && (status === 200 || status === 201)) {\n          console.log(\"Successfully inserted patient: \" + result); //this.reloadHandler();\n        } else {\n          _this2.setState({\n            errorStatus: status,\n            error: error\n          });\n        }\n      });\n    }\n  }, {\n    key: \"findCaregiver\",\n    value: function findCaregiver(name) {\n      return new Promise(function (resolve, reject) {\n        API_USERS.getCaregiverByName(name, function (result, status, error) {\n          if (result !== null && (status === 200 || status === 201)) {\n            resolve(result.id);\n          } else {\n            reject(error);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"findMedPlan\",\n    value: function findMedPlan(period) {\n      return new Promise(function (resolve, reject) {\n        API_USERS.getMedPlanByPeriod(period, function (result, status, error) {\n          if (result !== null && (status === 200 || status === 201)) {\n            resolve(result.id);\n          } else {\n            reject(error);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"deletePatient\",\n    value: function deletePatient(patient) {\n      var _this3 = this;\n\n      return API_USERS.deletePatient(patient.name, function (result, status, error) {\n        if (result !== null && (status === 200 || status === 201)) {\n          console.log(\"Successfully deleted patient\"); //this.reloadHandler();\n        } else {\n          _this3.setState({\n            errorStatus: status,\n            error: error\n          });\n        }\n      });\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function () {\n      var _handleSubmit = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var oldPatient, care_name, plan_period, patient;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                oldPatient = {\n                  name: this.state.formControls.oldName.value\n                };\n                this.deletePatient(oldPatient);\n                care_name = this.state.formControls.caregiverID.value;\n                _context.next = 5;\n                return this.findCaregiver(care_name);\n\n              case 5:\n                this.state.formControls.caregiverID.value = _context.sent;\n                plan_period = this.state.formControls.medplanid.value;\n                _context.next = 9;\n                return this.findMedPlan(plan_period);\n\n              case 9:\n                this.state.formControls.medplanid.value = _context.sent;\n                patient = {\n                  name: this.state.formControls.name.value,\n                  gender: this.state.formControls.gender.value,\n                  date: this.state.formControls.date.value,\n                  address: this.state.formControls.address.value,\n                  medicalRecord: this.state.formControls.medicalRecord.value,\n                  medplanid: this.state.formControls.medplanid.value,\n                  caregiverID: this.state.formControls.caregiverID.value\n                };\n                console.log(patient);\n                this.registerPatient(patient);\n                this.reloadHandler();\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function handleSubmit() {\n        return _handleSubmit.apply(this, arguments);\n      }\n\n      return handleSubmit;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        id: \"oldName\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"oldNameField\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }, \" Patient to update: \"), React.createElement(Input, {\n        name: \"oldName\",\n        id: \"oldNameField\",\n        placeholder: this.state.formControls.oldName.placeholder,\n        onChange: this.handleChange,\n        defaultValue: this.state.formControls.oldName.value,\n        touched: this.state.formControls.oldName.touched ? 1 : 0,\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      })), React.createElement(FormGroup, {\n        id: \"name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"nameField\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }, \"New name: \"), React.createElement(Input, {\n        name: \"name\",\n        id: \"nameField\",\n        placeholder: this.state.formControls.name.placeholder,\n        onChange: this.handleChange,\n        defaultValue: this.state.formControls.name.value,\n        touched: this.state.formControls.name.touched ? 1 : 0,\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215\n        },\n        __self: this\n      })), React.createElement(FormGroup, {\n        id: \"gender\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"genderField\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      }, \"New gender: \"), React.createElement(Input, {\n        name: \"gender\",\n        id: \"genderField\",\n        placeholder: this.state.formControls.gender.placeholder,\n        onChange: this.handleChange,\n        defaultValue: this.state.formControls.gender.value,\n        touched: this.state.formControls.gender.touched ? 1 : 0,\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225\n        },\n        __self: this\n      })), React.createElement(FormGroup, {\n        id: \"date\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"dateField\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234\n        },\n        __self: this\n      }, \"New birthday: \"), React.createElement(Input, {\n        name: \"date\",\n        id: \"dateField\",\n        placeholder: this.state.formControls.date.placeholder,\n        type: \"date\",\n        onChange: this.handleChange,\n        defaultValue: this.state.formControls.date.value,\n        touched: this.state.formControls.date.touched ? 1 : 0,\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235\n        },\n        __self: this\n      })), React.createElement(FormGroup, {\n        id: \"address\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"addressField\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245\n        },\n        __self: this\n      }, \"New address: \"), React.createElement(Input, {\n        name: \"address\",\n        id: \"addressField\",\n        placeholder: this.state.formControls.address.placeholder,\n        onChange: this.handleChange,\n        defaultValue: this.state.formControls.address.value,\n        touched: this.state.formControls.address.touched ? 1 : 0,\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        },\n        __self: this\n      })), React.createElement(FormGroup, {\n        id: \"medicalRecord\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"medicalRecordField\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255\n        },\n        __self: this\n      }, \"New record: \"), React.createElement(Input, {\n        name: \"medicalRecord\",\n        id: \"medicalRecordField\",\n        placeholder: this.state.formControls.medicalRecord.placeholder,\n        onChange: this.handleChange,\n        defaultValue: this.state.formControls.medicalRecord.value,\n        touched: this.state.formControls.medicalRecord.touched ? 1 : 0,\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256\n        },\n        __self: this\n      })), React.createElement(FormGroup, {\n        id: \"caregiverID\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"caregiverIDField\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 265\n        },\n        __self: this\n      }, \"New caregiver: \"), React.createElement(Input, {\n        name: \"caregiverID\",\n        id: \"caregiverIDField\",\n        placeholder: this.state.formControls.caregiverID.placeholder,\n        onChange: this.handleChange,\n        defaultValue: this.state.formControls.caregiverID.value,\n        touched: this.state.formControls.caregiverID.touched ? 1 : 0,\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266\n        },\n        __self: this\n      })), React.createElement(FormGroup, {\n        id: \"medplanid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"medplanidField\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275\n        },\n        __self: this\n      }, \"New medication Plan: \"), React.createElement(Input, {\n        name: \"medplanid\",\n        id: \"medplanidField\",\n        placeholder: this.state.formControls.medplanid.placeholder,\n        onChange: this.handleChange,\n        defaultValue: this.state.formControls.medplanid.value,\n        touched: this.state.formControls.medplanid.touched ? 1 : 0,\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276\n        },\n        __self: this\n      })), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285\n        },\n        __self: this\n      }, React.createElement(Col, {\n        sm: {\n          size: '4',\n          offset: 8\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 286\n        },\n        __self: this\n      }, React.createElement(Button, {\n        type: \"submit\",\n        onClick: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 287\n        },\n        __self: this\n      }, \"  Submit \"))));\n    }\n  }]);\n\n  return PatientUpdateForm;\n}(React.Component);\n\nexport default PatientUpdateForm;","map":{"version":3,"sources":["C:\\Users\\user\\Desktop\\CSC - anul 2\\SD\\SpringPractice\\react-demo\\src\\patient\\components\\patient-update-form.js"],"names":["React","validate","Button","API_USERS","APIResponseErrorMessage","Col","Row","FormGroup","Input","Label","PatientUpdateForm","props","handleChange","event","name","target","value","updatedControls","state","formControls","updatedFormElement","touched","valid","validationRules","formIsValid","updatedFormElementName","setState","toggleForm","bind","reloadHandler","testpls","errorStatus","error","oldName","placeholder","gender","date","address","medicalRecord","caregiverID","medplanid","handleSubmit","collapseForm","patient","postPatient","result","status","console","log","Promise","resolve","reject","getCaregiverByName","id","period","getMedPlanByPeriod","deletePatient","oldPatient","care_name","findCaregiver","plan_period","findMedPlan","registerPatient","size","offset","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport validate from \"../../patient/components/validators/patient-validators\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport * as API_USERS from \"../../patient/api/patient-api\";\r\nimport APIResponseErrorMessage from \"../../commons/errorhandling/api-response-error-message\";\r\nimport {Col, Row} from \"reactstrap\";\r\nimport { FormGroup, Input, Label} from 'reactstrap';\r\n\r\n\r\nclass PatientUpdateForm extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.toggleForm = this.toggleForm.bind(this);\r\n        this.reloadHandler = this.props.reloadHandler;\r\n\r\n        this.state = {\r\n            testpls: '',\r\n            errorStatus: 0,\r\n            error: null,\r\n\r\n            formIsValid: false,\r\n\r\n            formControls: {\r\n                oldName: {\r\n                    value: '',\r\n                    placeholder: '',\r\n                    valid: false,\r\n                    touched: false,\r\n                },\r\n                name: {\r\n                    value: '',\r\n                    placeholder: '',\r\n                    valid: false,\r\n                    touched: false,\r\n                },\r\n                gender: {\r\n                    value: '',\r\n                    placeholder: '',\r\n                    valid: false,\r\n                    touched: false,\r\n                },\r\n                date: {\r\n                    value: '',\r\n                    placeholder: '',\r\n                    valid: false,\r\n                    touched: false,\r\n                },\r\n                address: {\r\n                    value: '',\r\n                    placeholder: '',\r\n                    valid: false,\r\n                    touched: false,\r\n                },\r\n                medicalRecord: {\r\n                    value: '',\r\n                    placeholder: '',\r\n                    valid: false,\r\n                    touched: false,\r\n                },\r\n                caregiverID: {\r\n                    value: '',\r\n                    placeholder: '',\r\n                    valid: false,\r\n                    touched: false,\r\n                },\r\n                medplanid: {\r\n                    value: '',\r\n                    placeholder: '',\r\n                    valid: false,\r\n                    touched: false,\r\n                },\r\n\r\n            }\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    toggleForm() {\r\n        this.setState({collapseForm: !this.state.collapseForm});\r\n    }\r\n\r\n\r\n    handleChange = event => {\r\n\r\n        const name = event.target.name;\r\n        const value = event.target.value;\r\n\r\n        const updatedControls = this.state.formControls;\r\n\r\n        const updatedFormElement = updatedControls[name];\r\n\r\n        updatedFormElement.value = value;\r\n        updatedFormElement.touched = true;\r\n        updatedFormElement.valid = validate(value, updatedFormElement.validationRules);\r\n        updatedControls[name] = updatedFormElement;\r\n\r\n        let formIsValid = true;\r\n        for (let updatedFormElementName in updatedControls) {\r\n            formIsValid = updatedControls[updatedFormElementName].valid && formIsValid;\r\n        }\r\n\r\n        this.setState({\r\n            formControls: updatedControls,\r\n            formIsValid: formIsValid\r\n        });\r\n\r\n    };\r\n\r\n    registerPatient(patient) {\r\n        return API_USERS.postPatient(patient, (result, status, error) => {\r\n            if (result !== null && (status === 200 || status === 201)) {\r\n                console.log(\"Successfully inserted patient: \" + result);\r\n                //this.reloadHandler();\r\n            } else {\r\n                this.setState(({\r\n                    errorStatus: status,\r\n                    error: error\r\n                }));\r\n            }\r\n        });\r\n    }\r\n\r\n    findCaregiver(name) {\r\n        return new Promise((resolve, reject) => {\r\n            API_USERS.getCaregiverByName(name, (result, status, error) => {\r\n                if (result !== null && (status === 200 || status === 201)) {\r\n                    resolve(result.id);\r\n                } else {\r\n                    reject(error);\r\n                }\r\n            })\r\n        });\r\n\r\n    }\r\n\r\n    findMedPlan(period) {\r\n        return new Promise((resolve, reject) => {\r\n            API_USERS.getMedPlanByPeriod(period, (result, status, error) => {\r\n                if (result !== null && (status === 200 || status === 201)) {\r\n                    resolve(result.id);\r\n                } else {\r\n                    reject(error);\r\n                }\r\n            })\r\n        });\r\n\r\n    }\r\n\r\n    deletePatient(patient){\r\n        return API_USERS.deletePatient(patient.name, (result, status, error) => {\r\n            if (result !== null && (status === 200 || status === 201)) {\r\n                console.log(\"Successfully deleted patient\");\r\n                //this.reloadHandler();\r\n            } else {\r\n                this.setState(({\r\n                    errorStatus: status,\r\n                    error: error\r\n                }));\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    async handleSubmit() {\r\n\r\n        let oldPatient = {\r\n            name: this.state.formControls.oldName.value\r\n        };\r\n\r\n        this.deletePatient(oldPatient);\r\n\r\n\r\n        let care_name = this.state.formControls.caregiverID.value;\r\n\r\n        this.state.formControls.caregiverID.value = await this.findCaregiver(care_name);\r\n\r\n        let plan_period = this.state.formControls.medplanid.value;\r\n        this.state.formControls.medplanid.value = await this.findMedPlan(plan_period);\r\n\r\n        let patient = {\r\n            name: this.state.formControls.name.value,\r\n            gender: this.state.formControls.gender.value,\r\n            date: this.state.formControls.date.value,\r\n            address: this.state.formControls.address.value,\r\n            medicalRecord: this.state.formControls.medicalRecord.value,\r\n            medplanid: this.state.formControls.medplanid.value,\r\n            caregiverID: this.state.formControls.caregiverID.value\r\n\r\n        };\r\n\r\n        console.log(patient);\r\n        this.registerPatient(patient);\r\n        this.reloadHandler();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n\r\n                <FormGroup id='oldName'>\r\n                    <Label for='oldNameField'> Patient to update: </Label>\r\n                    <Input name='oldName' id='oldNameField' placeholder={this.state.formControls.oldName.placeholder}\r\n                           onChange={this.handleChange}\r\n                           defaultValue={this.state.formControls.oldName.value}\r\n                           touched={this.state.formControls.oldName.touched? 1 : 0}\r\n                           required\r\n                    />\r\n                </FormGroup>\r\n\r\n                <FormGroup id='name'>\r\n                    <Label for='nameField'>New name: </Label>\r\n                    <Input name='name' id='nameField' placeholder={this.state.formControls.name.placeholder}\r\n                           onChange={this.handleChange}\r\n                           defaultValue={this.state.formControls.name.value}\r\n                           touched={this.state.formControls.name.touched? 1 : 0}\r\n                           required\r\n                    />\r\n                </FormGroup>\r\n\r\n                <FormGroup id='gender'>\r\n                    <Label for='genderField'>New gender: </Label>\r\n                    <Input name='gender' id='genderField' placeholder={this.state.formControls.gender.placeholder}\r\n                           onChange={this.handleChange}\r\n                           defaultValue={this.state.formControls.gender.value}\r\n                           touched={this.state.formControls.gender.touched? 1 : 0}\r\n                           required\r\n                    />\r\n                </FormGroup>\r\n\r\n                <FormGroup id='date'>\r\n                    <Label for='dateField'>New birthday: </Label>\r\n                    <Input name='date' id='dateField' placeholder={this.state.formControls.date.placeholder}\r\n                           type=\"date\"\r\n                           onChange={this.handleChange}\r\n                           defaultValue={this.state.formControls.date.value}\r\n                           touched={this.state.formControls.date.touched? 1 : 0}\r\n                           required\r\n                    />\r\n                </FormGroup>\r\n\r\n                <FormGroup id='address'>\r\n                    <Label for='addressField'>New address: </Label>\r\n                    <Input name='address' id='addressField' placeholder={this.state.formControls.address.placeholder}\r\n                           onChange={this.handleChange}\r\n                           defaultValue={this.state.formControls.address.value}\r\n                           touched={this.state.formControls.address.touched? 1 : 0}\r\n                           required\r\n                    />\r\n                </FormGroup>\r\n\r\n                <FormGroup id='medicalRecord'>\r\n                    <Label for='medicalRecordField'>New record: </Label>\r\n                    <Input name='medicalRecord' id='medicalRecordField' placeholder={this.state.formControls.medicalRecord.placeholder}\r\n                           onChange={this.handleChange}\r\n                           defaultValue={this.state.formControls.medicalRecord.value}\r\n                           touched={this.state.formControls.medicalRecord.touched? 1 : 0}\r\n                           required\r\n                    />\r\n                </FormGroup>\r\n\r\n                <FormGroup id='caregiverID'>\r\n                    <Label for='caregiverIDField'>New caregiver: </Label>\r\n                    <Input name='caregiverID' id='caregiverIDField' placeholder={this.state.formControls.caregiverID.placeholder}\r\n                           onChange={this.handleChange}\r\n                           defaultValue={this.state.formControls.caregiverID.value}\r\n                           touched={this.state.formControls.caregiverID.touched? 1 : 0}\r\n                           required\r\n                    />\r\n                </FormGroup>\r\n\r\n                <FormGroup id='medplanid'>\r\n                    <Label for='medplanidField'>New medication Plan: </Label>\r\n                    <Input name='medplanid' id='medplanidField' placeholder={this.state.formControls.medplanid.placeholder}\r\n                           onChange={this.handleChange}\r\n                           defaultValue={this.state.formControls.medplanid.value}\r\n                           touched={this.state.formControls.medplanid.touched? 1 : 0}\r\n                           required\r\n                    />\r\n                </FormGroup>\r\n\r\n\r\n                <Row>\r\n                    <Col sm={{size: '4', offset: 8}}>\r\n                        <Button type={\"submit\"} onClick={this.handleSubmit}>  Submit </Button>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        ) ;\r\n    }\r\n}\r\n\r\nexport default PatientUpdateForm;\r\n"]},"metadata":{},"sourceType":"module"}