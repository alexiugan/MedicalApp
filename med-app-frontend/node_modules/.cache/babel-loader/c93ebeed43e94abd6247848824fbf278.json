{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\react-demo\\\\src\\\\medication\\\\medication-remove-form.js\";\nimport React from 'react';\nimport Button from \"react-bootstrap/Button\";\nimport * as API_USERS from \"../medication/medication-api\";\nimport { Col, Row } from \"reactstrap\";\nimport { FormGroup, Input, Label } from 'reactstrap';\n\nvar MedicationRemoveForm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(MedicationRemoveForm, _React$Component);\n\n  function MedicationRemoveForm(props) {\n    var _this;\n\n    _classCallCheck(this, MedicationRemoveForm);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MedicationRemoveForm).call(this, props));\n\n    _this.handleChange = function (event) {\n      var name = event.target.name;\n      var value = event.target.value;\n      var updatedControls = _this.state.formControls;\n      var updatedFormElement = updatedControls[name];\n      updatedFormElement.value = value;\n      updatedFormElement.touched = true;\n      updatedFormElement.valid = validate(value, updatedFormElement.validationRules);\n      updatedControls[name] = updatedFormElement;\n      var formIsValid = true;\n\n      for (var updatedFormElementName in updatedControls) {\n        formIsValid = updatedControls[updatedFormElementName].valid && formIsValid;\n      }\n\n      _this.setState({\n        formControls: updatedControls,\n        formIsValid: formIsValid\n      });\n    };\n\n    _this.toggleForm = _this.toggleForm.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.reloadHandler = _this.props.reloadHandler;\n    _this.state = {\n      errorStatus: 0,\n      error: null,\n      formIsValid: false,\n      formControls: {\n        name: {\n          value: '',\n          placeholder: '',\n          valid: false,\n          touched: false\n        }\n      }\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(MedicationRemoveForm, [{\n    key: \"toggleForm\",\n    value: function toggleForm() {\n      this.setState({\n        collapseForm: !this.state.collapseForm\n      });\n    }\n  }, {\n    key: \"deleteMedication\",\n    value: function deleteMedication(medication) {\n      var _this2 = this;\n\n      return API_USERS.deleteMedication(medication.name, function (result, status, error) {\n        if (result !== null && (status === 200 || status === 201)) {\n          console.log(\"Successfully deleted medication\");\n\n          _this2.reloadHandler();\n        } else {\n          _this2.setState({\n            errorStatus: status,\n            error: error\n          });\n        }\n      });\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function () {\n      var _handleSubmit = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var medication;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                medication = {\n                  name: this.state.formControls.name.value\n                };\n                console.log(medication);\n                this.deleteMedication(medication);\n                this.reloadHandler();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function handleSubmit() {\n        return _handleSubmit.apply(this, arguments);\n      }\n\n      return handleSubmit;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        id: \"name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"nameField\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, \" Name: \"), React.createElement(Input, {\n        name: \"name\",\n        id: \"nameField\",\n        placeholder: this.state.formControls.name.placeholder,\n        onChange: this.handleChange,\n        defaultValue: this.state.formControls.name.value,\n        touched: this.state.formControls.name.touched ? 1 : 0,\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      })), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, React.createElement(Col, {\n        sm: {\n          size: '4',\n          offset: 8\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(Button, {\n        type: \"submit\",\n        onClick: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, \"  Submit \"))));\n    }\n  }]);\n\n  return MedicationRemoveForm;\n}(React.Component);\n\nexport default MedicationRemoveForm;","map":{"version":3,"sources":["C:\\Users\\user\\Desktop\\CSC - anul 2\\SD\\SpringPractice\\react-demo\\src\\medication\\medication-remove-form.js"],"names":["React","Button","API_USERS","Col","Row","FormGroup","Input","Label","MedicationRemoveForm","props","handleChange","event","name","target","value","updatedControls","state","formControls","updatedFormElement","touched","valid","validate","validationRules","formIsValid","updatedFormElementName","setState","toggleForm","bind","reloadHandler","errorStatus","error","placeholder","handleSubmit","collapseForm","medication","deleteMedication","result","status","console","log","size","offset","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Button from \"react-bootstrap/Button\";\r\nimport * as API_USERS from \"../medication/medication-api\";\r\nimport {Col, Row} from \"reactstrap\";\r\nimport { FormGroup, Input, Label} from 'reactstrap';\r\n\r\n\r\nclass MedicationRemoveForm extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.toggleForm = this.toggleForm.bind(this);\r\n        this.reloadHandler = this.props.reloadHandler;\r\n\r\n        this.state = {\r\n            errorStatus: 0,\r\n            error: null,\r\n\r\n            formIsValid: false,\r\n\r\n            formControls: {\r\n                name: {\r\n                    value: '',\r\n                    placeholder: '',\r\n                    valid: false,\r\n                    touched: false,\r\n                },\r\n\r\n            }\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    toggleForm() {\r\n        this.setState({collapseForm: !this.state.collapseForm});\r\n    }\r\n\r\n\r\n    handleChange = event => {\r\n\r\n        const name = event.target.name;\r\n        const value = event.target.value;\r\n\r\n        const updatedControls = this.state.formControls;\r\n\r\n        const updatedFormElement = updatedControls[name];\r\n\r\n        updatedFormElement.value = value;\r\n        updatedFormElement.touched = true;\r\n        updatedFormElement.valid = validate(value, updatedFormElement.validationRules);\r\n        updatedControls[name] = updatedFormElement;\r\n\r\n        let formIsValid = true;\r\n        for (let updatedFormElementName in updatedControls) {\r\n            formIsValid = updatedControls[updatedFormElementName].valid && formIsValid;\r\n        }\r\n\r\n        this.setState({\r\n            formControls: updatedControls,\r\n            formIsValid: formIsValid\r\n        });\r\n\r\n    };\r\n\r\n    deleteMedication(medication) {\r\n        return API_USERS.deleteMedication(medication.name, (result, status, error) => {\r\n            if (result !== null && (status === 200 || status === 201)) {\r\n                console.log(\"Successfully deleted medication\");\r\n                this.reloadHandler();\r\n            } else {\r\n                this.setState(({\r\n                    errorStatus: status,\r\n                    error: error\r\n                }));\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n\r\n\r\n    async handleSubmit() {\r\n\r\n        let medication = {\r\n            name: this.state.formControls.name.value,\r\n        };\r\n\r\n        console.log(medication);\r\n        this.deleteMedication(medication);\r\n        this.reloadHandler();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n\r\n                <FormGroup id='name'>\r\n                    <Label for='nameField'> Name: </Label>\r\n                    <Input name='name' id='nameField' placeholder={this.state.formControls.name.placeholder}\r\n                           onChange={this.handleChange}\r\n                           defaultValue={this.state.formControls.name.value}\r\n                           touched={this.state.formControls.name.touched? 1 : 0}\r\n                           required\r\n                    />\r\n                </FormGroup>\r\n\r\n                <Row>\r\n                    <Col sm={{size: '4', offset: 8}}>\r\n                        <Button type={\"submit\"} onClick={this.handleSubmit}>  Submit </Button>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        ) ;\r\n    }\r\n}\r\n\r\nexport default MedicationRemoveForm;\r\n"]},"metadata":{},"sourceType":"module"}