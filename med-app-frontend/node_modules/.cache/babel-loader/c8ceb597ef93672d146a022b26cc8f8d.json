{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\react-demo\\\\src\\\\home\\\\home.js\";\nimport React from 'react';\nimport BackgroundImg from '../commons/images/future-medicine.jpg';\nimport { Button, Form, FormGroup, Label, Input, Container, Jumbotron } from 'reactstrap';\nimport { HOST } from \"../commons/hosts\";\nimport RestApiClient from \"../commons/api/rest-client\";\nimport * as API_USERS from \"../person/api/person-api\";\nimport validate from \"../person/components/validators/person-validators\";\nvar backgroundStyle = {\n  backgroundPosition: 'center',\n  backgroundSize: 'cover',\n  backgroundRepeat: 'no-repeat',\n  width: \"100%\",\n  height: \"1920px\",\n  backgroundImage: \"url(\".concat(BackgroundImg, \")\")\n};\nvar textStyle = {\n  fontSize: \"44px\",\n  color: 'white',\n  textAlign: 'center',\n  borderBottom: \"solid\",\n  borderWidth: \"2px\",\n  borderColor: \"lightgrey\",\n  padding: \"7px\",\n  marginBottom: \"10px\"\n};\nvar loginForm = {\n  borderRadius: \"10px\",\n  width: \"100%\",\n  maxWidth: \"330px\",\n  padding: \"15px\",\n  margin: \"auto\",\n  height: \"23%\",\n  backgroundColor: \"#708090\"\n};\nvar validMsg = {\n  textAlign: 'center',\n  marginBottom: \"5px\",\n  color: \"white\"\n};\nvar invalidMsg = {\n  textAlign: 'center',\n  marginBottom: \"5px\",\n  color: \"red\"\n};\nvar button = {\n  width: \"60%\",\n  marginTop: \"20px\",\n  marginLeft: \"20%\",\n  height: \"35%\",\n  backgroundColor: \"black\"\n};\nvar endpoint = {\n  login: '/users'\n};\n\nvar Home =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Home, _React$Component);\n\n  function Home(props) {\n    var _this;\n\n    _classCallCheck(this, Home);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Home).call(this, props));\n\n    _this.handleChange = function (event) {\n      var name = event.target.name;\n      var value = event.target.value;\n      var updatedControls = _this.state.formControls;\n      var updatedFormElement = updatedControls[name];\n      updatedFormElement.value = value;\n      updatedFormElement.touched = true;\n      updatedFormElement.valid = validate(value, updatedFormElement.validationRules);\n      updatedControls[name] = updatedFormElement;\n      var formIsValid = true;\n\n      for (var updatedFormElementName in updatedControls) {\n        formIsValid = updatedControls[updatedFormElementName].valid && formIsValid;\n      }\n\n      _this.setState({\n        formControls: updatedControls,\n        formIsValid: formIsValid\n      });\n    };\n\n    _this.toggleForm = _this.toggleForm.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.state = {\n      errorStatus: 0,\n      error: null,\n      formControls: {\n        username: {\n          value: '',\n          placeholder: '',\n          touched: false\n        },\n        password: {\n          value: '',\n          placeholder: '',\n          touched: false\n        },\n        validMsg: {\n          value: '',\n          placeholder: '',\n          touched: false\n        },\n        invalidMsg: {\n          value: '',\n          placeholder: '',\n          touched: false\n        }\n      }\n    };\n    _this.updateUsername = _this.updateUsername.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.updatePassword = _this.updatePassword.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.updateMsgGood = _this.updateMsgGood.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.updateMsgBad = _this.updateMsgBad.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onSubmit = _this.onSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Home, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(Jumbotron, {\n        fluid: true,\n        style: backgroundStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, React.createElement(Form, {\n        className: \"login-form\",\n        style: loginForm,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, React.createElement(Container, {\n        fluid: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"display-3\",\n        style: textStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, \"Login\"), React.createElement(\"div\", {\n        className: \"message\",\n        style: validMsg,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, this.state.validMsg), React.createElement(\"div\", {\n        className: \"message\",\n        style: invalidMsg,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, this.state.invalidMsg), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, React.createElement(Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, \"Username\"), React.createElement(Input, {\n        value: this.state.username,\n        onChange: function onChange(evt) {\n          return _this2.updateUsername(evt);\n        },\n        type: \"text\",\n        name: \"username\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      })), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, React.createElement(Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, \"Password\"), React.createElement(Input, {\n        value: this.state.password,\n        onChange: function onChange(evt) {\n          return _this2.updatePassword(evt);\n        },\n        type: \"password\",\n        id: \"password\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      })), React.createElement(Button, {\n        style: button,\n        onClick: this.onSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, \"Login\"))));\n    }\n  }, {\n    key: \"registerPerson\",\n    value: function registerPerson(person) {\n      var _this3 = this;\n\n      return API_USERS.postPerson(person, function (result, status, error) {\n        if (result !== null && (status === 200 || status === 201)) {\n          console.log(\"Successfully inserted person with id: \" + result);\n\n          _this3.reloadHandler();\n        } else {\n          _this3.setState({\n            errorStatus: status,\n            error: error\n          });\n        }\n      });\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit() {\n      var person = {\n        name: this.state.formControls.name.value,\n        email: this.state.formControls.email.value,\n        age: this.state.formControls.age.value,\n        address: this.state.formControls.address.value\n      };\n      console.log(person);\n      this.registerPerson(person);\n    }\n    /*\r\n        updateUsername(evt) {\r\n            this.setState({\r\n                username: evt.target.value\r\n            });\r\n        }\r\n    \r\n        updatePassword(evt) {\r\n            this.setState({\r\n                password: evt.target.value\r\n            });\r\n        }\r\n    \r\n        updateMsgGood(evt) {\r\n            this.setState({\r\n                validMsg: \"Login successfull!\",\r\n                invalidMsg: \"\"\r\n            });\r\n        }\r\n    \r\n        updateMsgBad(evt) {\r\n            this.setState({\r\n                invalidMsg: \"Invalid username or password!\",\r\n                validMsg: \"\"\r\n            });\r\n        }\r\n    \r\n        onSubmit(){\r\n            let login = {\r\n                username: this.state.formControls.username.value,\r\n                password: this.state.formControls.password.value\r\n            };\r\n            this.checkLogin(login);\r\n        }\r\n    \r\n    \r\n        checkLogin(login){\r\n    \r\n            return this.sendRequest(login, (result, status, err) => {\r\n                console.log(status);\r\n                console.log(\"Result = \" + result);\r\n                if (result !== null && (status === 200 || status === 201)) {\r\n                    this.updateMsgGood();\r\n                } else {\r\n                    console.log(\"There was an error \" + err);\r\n                    this.updateMsgBad();\r\n                }\r\n            });\r\n        }\r\n    \r\n        sendRequest(login, callback){\r\n            let request = new Request(HOST.backend_api + endpoint.login + \"/login\", {\r\n                method: 'POST',\r\n                headers : {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(login)\r\n            });\r\n            console.log(request.url);\r\n            console.log(login);\r\n            RestApiClient.performRequest(request, callback, login);\r\n        }*/\n\n  }]);\n\n  return Home;\n}(React.Component);\n\nexport default Home;","map":{"version":3,"sources":["C:\\Users\\user\\Desktop\\CSC - anul 2\\SD\\SpringPractice\\react-demo\\src\\home\\home.js"],"names":["React","BackgroundImg","Button","Form","FormGroup","Label","Input","Container","Jumbotron","HOST","RestApiClient","API_USERS","validate","backgroundStyle","backgroundPosition","backgroundSize","backgroundRepeat","width","height","backgroundImage","textStyle","fontSize","color","textAlign","borderBottom","borderWidth","borderColor","padding","marginBottom","loginForm","borderRadius","maxWidth","margin","backgroundColor","validMsg","invalidMsg","button","marginTop","marginLeft","endpoint","login","Home","props","handleChange","event","name","target","value","updatedControls","state","formControls","updatedFormElement","touched","valid","validationRules","formIsValid","updatedFormElementName","setState","toggleForm","bind","errorStatus","error","username","placeholder","password","updateUsername","updatePassword","updateMsgGood","updateMsgBad","onSubmit","evt","person","postPerson","result","status","console","log","reloadHandler","email","age","address","registerPerson","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport BackgroundImg from '../commons/images/future-medicine.jpg';\r\n\r\nimport {Button, Form, FormGroup, Label, Input, Container, Jumbotron} from 'reactstrap';\r\nimport {HOST} from \"../commons/hosts\";\r\nimport RestApiClient from \"../commons/api/rest-client\";\r\nimport * as API_USERS from \"../person/api/person-api\";\r\nimport validate from \"../person/components/validators/person-validators\";\r\n\r\n\r\nconst backgroundStyle = {\r\n    backgroundPosition: 'center',\r\n    backgroundSize: 'cover',\r\n    backgroundRepeat: 'no-repeat',\r\n    width: \"100%\",\r\n    height: \"1920px\",\r\n    backgroundImage: `url(${BackgroundImg})`\r\n};\r\nconst textStyle = {\r\n    fontSize: \"44px\",\r\n    color: 'white',\r\n    textAlign:'center',\r\n    borderBottom: \"solid\",\r\n    borderWidth: \"2px\",\r\n    borderColor: \"lightgrey\",\r\n    padding: \"7px\",\r\n    marginBottom:\"10px\"\r\n};\r\n\r\nconst loginForm = {\r\n    borderRadius: \"10px\",\r\n    width: \"100%\",\r\n    maxWidth: \"330px\",\r\n    padding: \"15px\",\r\n    margin: \"auto\",\r\n    height: \"23%\",\r\n    backgroundColor: \"#708090\"\r\n};\r\n\r\n\r\nconst validMsg = {\r\n    textAlign:'center',\r\n    marginBottom: \"5px\",\r\n    color: \"white\"\r\n};\r\n\r\nconst invalidMsg = {\r\n    textAlign:'center',\r\n    marginBottom: \"5px\",\r\n    color: \"red\"\r\n};\r\n\r\nconst button = {\r\n    width: \"60%\",\r\n    marginTop: \"20px\",\r\n    marginLeft: \"20%\",\r\n    height: \"35%\",\r\n    backgroundColor: \"black\"\r\n};\r\n\r\nconst endpoint = {\r\n    login: '/users'\r\n};\r\n\r\n\r\nclass Home extends React.Component {\r\n\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.toggleForm = this.toggleForm.bind(this);\r\n\r\n\r\n        this.state = {\r\n\r\n            errorStatus: 0,\r\n            error: null,\r\n\r\n\r\n            formControls: {\r\n                username: {\r\n                    value: '',\r\n                    placeholder: '',\r\n                    touched: false,\r\n                },\r\n                password: {\r\n                    value: '',\r\n                    placeholder: '',\r\n                    touched: false\r\n                },\r\n                validMsg: {\r\n                    value: '',\r\n                    placeholder: '',\r\n                    touched: false,\r\n                },\r\n                invalidMsg: {\r\n                    value: '',\r\n                    placeholder: '',\r\n                    touched: false,\r\n                },\r\n            }\r\n        };\r\n\r\n        this.updateUsername = this.updateUsername.bind(this);\r\n        this.updatePassword = this.updatePassword.bind(this);\r\n        this.updateMsgGood = this.updateMsgGood.bind(this);\r\n        this.updateMsgBad = this.updateMsgBad.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Jumbotron fluid style={backgroundStyle}>\r\n                <Form className=\"login-form\" style={loginForm}>\r\n\r\n                    <Container fluid>\r\n                        <h1 className=\"display-3\" style={textStyle}>Login</h1>\r\n                        <div className=\"message\" style={validMsg}>{this.state.validMsg}</div>\r\n                        <div className=\"message\" style={invalidMsg}>{this.state.invalidMsg}</div>\r\n                        <FormGroup>\r\n                            <Label>Username</Label>\r\n                            <Input value={this.state.username} onChange={evt => this.updateUsername(evt)} type={\"text\"} name={\"username\"}/>\r\n                        </FormGroup>\r\n\r\n                        <FormGroup>\r\n                            <Label>Password</Label>\r\n                            <Input value={this.state.password} onChange={evt => this.updatePassword(evt)} type={\"password\"} id={\"password\"}/>\r\n                        </FormGroup>\r\n                        <Button style={button} onClick={this.onSubmit}>Login</Button>\r\n                    </Container>\r\n\r\n\r\n                </Form>\r\n            </Jumbotron>\r\n        )\r\n    };\r\n\r\n\r\n\r\n\r\n    handleChange = event => {\r\n\r\n        const name = event.target.name;\r\n        const value = event.target.value;\r\n\r\n        const updatedControls = this.state.formControls;\r\n\r\n        const updatedFormElement = updatedControls[name];\r\n\r\n        updatedFormElement.value = value;\r\n        updatedFormElement.touched = true;\r\n        updatedFormElement.valid = validate(value, updatedFormElement.validationRules);\r\n        updatedControls[name] = updatedFormElement;\r\n\r\n        let formIsValid = true;\r\n        for (let updatedFormElementName in updatedControls) {\r\n            formIsValid = updatedControls[updatedFormElementName].valid && formIsValid;\r\n        }\r\n\r\n        this.setState({\r\n            formControls: updatedControls,\r\n            formIsValid: formIsValid\r\n        });\r\n\r\n    };\r\n\r\n    registerPerson(person) {\r\n        return API_USERS.postPerson(person, (result, status, error) => {\r\n            if (result !== null && (status === 200 || status === 201)) {\r\n                console.log(\"Successfully inserted person with id: \" + result);\r\n                this.reloadHandler();\r\n            } else {\r\n                this.setState(({\r\n                    errorStatus: status,\r\n                    error: error\r\n                }));\r\n            }\r\n        });\r\n    }\r\n\r\n    handleSubmit() {\r\n        let person = {\r\n            name: this.state.formControls.name.value,\r\n            email: this.state.formControls.email.value,\r\n            age: this.state.formControls.age.value,\r\n            address: this.state.formControls.address.value\r\n        };\r\n\r\n        console.log(person);\r\n        this.registerPerson(person);\r\n    }\r\n/*\r\n    updateUsername(evt) {\r\n        this.setState({\r\n            username: evt.target.value\r\n        });\r\n    }\r\n\r\n    updatePassword(evt) {\r\n        this.setState({\r\n            password: evt.target.value\r\n        });\r\n    }\r\n\r\n    updateMsgGood(evt) {\r\n        this.setState({\r\n            validMsg: \"Login successfull!\",\r\n            invalidMsg: \"\"\r\n        });\r\n    }\r\n\r\n    updateMsgBad(evt) {\r\n        this.setState({\r\n            invalidMsg: \"Invalid username or password!\",\r\n            validMsg: \"\"\r\n        });\r\n    }\r\n\r\n    onSubmit(){\r\n        let login = {\r\n            username: this.state.formControls.username.value,\r\n            password: this.state.formControls.password.value\r\n        };\r\n        this.checkLogin(login);\r\n    }\r\n\r\n\r\n    checkLogin(login){\r\n\r\n        return this.sendRequest(login, (result, status, err) => {\r\n            console.log(status);\r\n            console.log(\"Result = \" + result);\r\n            if (result !== null && (status === 200 || status === 201)) {\r\n                this.updateMsgGood();\r\n            } else {\r\n                console.log(\"There was an error \" + err);\r\n                this.updateMsgBad();\r\n            }\r\n        });\r\n    }\r\n\r\n    sendRequest(login, callback){\r\n        let request = new Request(HOST.backend_api + endpoint.login + \"/login\", {\r\n            method: 'POST',\r\n            headers : {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(login)\r\n        });\r\n        console.log(request.url);\r\n        console.log(login);\r\n        RestApiClient.performRequest(request, callback, login);\r\n    }*/\r\n}\r\n\r\n\r\n\r\nexport default Home\r\n"]},"metadata":{},"sourceType":"module"}