{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\react-demo\\\\src\\\\medicationPlan\\\\medication-plan-add-med.js\";\nimport React from 'react';\nimport Button from \"react-bootstrap/Button\";\nimport * as API_USERS from \"./medication-plan-api\";\nimport APIResponseErrorMessage from \"../commons/errorhandling/api-response-error-message\";\nimport { Col, Row } from \"reactstrap\";\nimport { FormGroup, Input, Label } from 'reactstrap';\n\nvar AddMedForm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AddMedForm, _React$Component);\n\n  function AddMedForm(props) {\n    var _this;\n\n    _classCallCheck(this, AddMedForm);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AddMedForm).call(this, props));\n\n    _this.handleChange = function (event) {\n      var name = event.target.name;\n      var value = event.target.value;\n      var updatedControls = _this.state.formControls;\n      var updatedFormElement = updatedControls[name];\n      updatedFormElement.value = value;\n      updatedFormElement.touched = true;\n      updatedControls[name] = updatedFormElement;\n      var formIsValid = true;\n\n      for (var updatedFormElementName in updatedControls) {\n        formIsValid = updatedControls[updatedFormElementName].valid && formIsValid;\n      }\n\n      _this.setState({\n        formControls: updatedControls,\n        formIsValid: formIsValid\n      });\n    };\n\n    _this.toggleForm = _this.toggleForm.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.reloadHandler = _this.props.reloadHandler;\n    _this.state = {\n      errorStatus: 0,\n      error: null,\n      formIsValid: false,\n      formControls: {\n        medName: {\n          value: '',\n          placeholder: '',\n          valid: false,\n          touched: false\n        },\n        period: {\n          value: '',\n          placeholder: '',\n          valid: false,\n          touched: false\n        },\n        medid: {\n          value: '',\n          placeholder: '',\n          valid: false,\n          touched: false\n        },\n        medplanid: {\n          value: '',\n          placeholder: '',\n          valid: false,\n          touched: false\n        }\n      }\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(AddMedForm, [{\n    key: \"toggleForm\",\n    value: function toggleForm() {\n      this.setState({\n        collapseForm: !this.state.collapseForm\n      });\n    }\n  }, {\n    key: \"registerMedicationPlan\",\n    value: function registerMedicationPlan(medplan) {\n      var _this2 = this;\n\n      return API_USERS.postMedicationPlan(medplan, function (result, status, error) {\n        if (result !== null && (status === 200 || status === 201)) {\n          console.log(\"Successfully inserted medication plan with id: \" + result);\n\n          _this2.reloadHandler();\n        } else {\n          _this2.setState({\n            errorStatus: status,\n            error: error\n          });\n        }\n      });\n    }\n  }, {\n    key: \"findMed\",\n    value: function findMed(name) {\n      return new Promise(function (resolve, reject) {\n        API_USERS.getMedicationByName(name, function (result, status, error) {\n          console.log(result.id);\n\n          if (result !== null && (status === 200 || status === 201)) {\n            resolve(result.id);\n          } else {\n            reject(error);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"findMedPlan\",\n    value: function findMedPlan(period) {\n      return new Promise(function (resolve, reject) {\n        API_USERS.getMedicationPlanByPeriod(period, function (result, status, error) {\n          if (result !== null && (status === 200 || status === 201)) {\n            resolve(result.id);\n          } else {\n            reject(error);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function () {\n      var _handleSubmit = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var med, period;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                med = this.state.formControls.medName.value;\n                _context.next = 3;\n                return this.findMed(med);\n\n              case 3:\n                this.state.formControls.medid.value = _context.sent;\n                period = this.state.formControls.period.value;\n                _context.next = 7;\n                return this.findMedPlan(period);\n\n              case 7:\n                this.state.formControls.medplanid.value = _context.sent;\n                console.log(\"FINALMENTE\");\n                console.log(this.state.formControls.medid.value);\n                console.log(this.state.formControls.medplanid.value);\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function handleSubmit() {\n        return _handleSubmit.apply(this, arguments);\n      }\n\n      return handleSubmit;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        id: \"medName\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"medNameField\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, \" Medication to add: \"), React.createElement(Input, {\n        name: \"medName\",\n        id: \"medNameField\",\n        placeholder: this.state.formControls.medName.placeholder,\n        onChange: this.handleChange,\n        defaultValue: this.state.formControls.medName.value,\n        touched: this.state.formControls.medName.touched ? 1 : 0,\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      })), React.createElement(FormGroup, {\n        id: \"period\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"periodField\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, \" Period: \"), React.createElement(Input, {\n        name: \"period\",\n        id: \"periodField\",\n        placeholder: this.state.formControls.period.placeholder,\n        onChange: this.handleChange,\n        defaultValue: this.state.formControls.period.value,\n        touched: this.state.formControls.period.touched ? 1 : 0,\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      })), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, React.createElement(Col, {\n        sm: {\n          size: '4',\n          offset: 8\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }, React.createElement(Button, {\n        type: \"submit\",\n        onClick: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }, \"  Submit \"))));\n    }\n  }]);\n\n  return AddMedForm;\n}(React.Component);\n\nexport default AddMedForm;","map":{"version":3,"sources":["C:\\Users\\user\\Desktop\\CSC - anul 2\\SD\\SpringPractice\\react-demo\\src\\medicationPlan\\medication-plan-add-med.js"],"names":["React","Button","API_USERS","APIResponseErrorMessage","Col","Row","FormGroup","Input","Label","AddMedForm","props","handleChange","event","name","target","value","updatedControls","state","formControls","updatedFormElement","touched","formIsValid","updatedFormElementName","valid","setState","toggleForm","bind","reloadHandler","errorStatus","error","medName","placeholder","period","medid","medplanid","handleSubmit","collapseForm","medplan","postMedicationPlan","result","status","console","log","Promise","resolve","reject","getMedicationByName","id","getMedicationPlanByPeriod","med","findMed","findMedPlan","size","offset","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Button from \"react-bootstrap/Button\";\r\nimport * as API_USERS from \"./medication-plan-api\";\r\nimport APIResponseErrorMessage from \"../commons/errorhandling/api-response-error-message\";\r\nimport {Col, Row} from \"reactstrap\";\r\nimport { FormGroup, Input, Label} from 'reactstrap';\r\n\r\n\r\n\r\nclass AddMedForm extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.toggleForm = this.toggleForm.bind(this);\r\n        this.reloadHandler = this.props.reloadHandler;\r\n\r\n        this.state = {\r\n\r\n            errorStatus: 0,\r\n            error: null,\r\n\r\n            formIsValid: false,\r\n\r\n            formControls: {\r\n                medName: {\r\n                    value: '',\r\n                    placeholder: '',\r\n                    valid: false,\r\n                    touched: false,\r\n                },\r\n                period: {\r\n                    value: '',\r\n                    placeholder: '',\r\n                    valid: false,\r\n                    touched: false,\r\n                },\r\n                medid: {\r\n                    value: '',\r\n                    placeholder: '',\r\n                    valid: false,\r\n                    touched: false,\r\n                },\r\n                medplanid: {\r\n                    value: '',\r\n                    placeholder: '',\r\n                    valid: false,\r\n                    touched: false,\r\n                },\r\n\r\n            }\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    toggleForm() {\r\n        this.setState({collapseForm: !this.state.collapseForm});\r\n    }\r\n\r\n\r\n    handleChange = event => {\r\n\r\n        const name = event.target.name;\r\n        const value = event.target.value;\r\n\r\n        const updatedControls = this.state.formControls;\r\n\r\n        const updatedFormElement = updatedControls[name];\r\n\r\n        updatedFormElement.value = value;\r\n        updatedFormElement.touched = true;\r\n\r\n        updatedControls[name] = updatedFormElement;\r\n\r\n        let formIsValid = true;\r\n        for (let updatedFormElementName in updatedControls) {\r\n            formIsValid = updatedControls[updatedFormElementName].valid && formIsValid;\r\n        }\r\n\r\n        this.setState({\r\n            formControls: updatedControls,\r\n            formIsValid: formIsValid\r\n        });\r\n\r\n    };\r\n\r\n    registerMedicationPlan(medplan) {\r\n        return API_USERS.postMedicationPlan(medplan, (result, status, error) => {\r\n            if (result !== null && (status === 200 || status === 201)) {\r\n                console.log(\"Successfully inserted medication plan with id: \" + result);\r\n                this.reloadHandler();\r\n            } else {\r\n                this.setState(({\r\n                    errorStatus: status,\r\n                    error: error\r\n                }));\r\n            }\r\n        });\r\n    }\r\n\r\n    findMed(name) {\r\n        return new Promise((resolve, reject) => {\r\n            API_USERS.getMedicationByName(name, (result, status, error) => {\r\n                console.log(result.id)\r\n                if (result !== null && (status === 200 || status === 201)) {\r\n                    resolve(result.id);\r\n                } else {\r\n                    reject(error);\r\n                }\r\n            })\r\n        });\r\n\r\n    }\r\n\r\n    findMedPlan(period) {\r\n        return new Promise((resolve, reject) => {\r\n            API_USERS.getMedicationPlanByPeriod(period, (result, status, error) => {\r\n                if (result !== null && (status === 200 || status === 201)) {\r\n                    resolve(result.id);\r\n                } else {\r\n                    reject(error);\r\n                }\r\n            })\r\n        });\r\n\r\n    }\r\n\r\n   async handleSubmit() {\r\n\r\n        let med = this.state.formControls.medName.value;\r\n        this.state.formControls.medid.value = await this.findMed(med);\r\n\r\n        let period = this.state.formControls.period.value;\r\n        this.state.formControls.medplanid.value = await this.findMedPlan(period);\r\n\r\n        console.log(\"FINALMENTE\");\r\n        console.log(this.state.formControls.medid.value);\r\n       console.log(this.state.formControls.medplanid.value);\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n\r\n                <FormGroup id='medName'>\r\n                    <Label for='medNameField'> Medication to add: </Label>\r\n                    <Input name='medName' id='medNameField' placeholder={this.state.formControls.medName.placeholder}\r\n                           onChange={this.handleChange}\r\n                           defaultValue={this.state.formControls.medName.value}\r\n                           touched={this.state.formControls.medName.touched? 1 : 0}\r\n                           required\r\n                    />\r\n\r\n                </FormGroup>\r\n\r\n                <FormGroup id='period'>\r\n                    <Label for='periodField'> Period: </Label>\r\n                    <Input name='period' id='periodField' placeholder={this.state.formControls.period.placeholder}\r\n                           onChange={this.handleChange}\r\n                           defaultValue={this.state.formControls.period.value}\r\n                           touched={this.state.formControls.period.touched? 1 : 0}\r\n                           required\r\n                    />\r\n\r\n                </FormGroup>\r\n\r\n\r\n                <Row>\r\n                    <Col sm={{size: '4', offset: 8}}>\r\n                        <Button type={\"submit\"} onClick={this.handleSubmit}>  Submit </Button>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        ) ;\r\n    }\r\n}\r\n\r\nexport default AddMedForm;\r\n"]},"metadata":{},"sourceType":"module"}