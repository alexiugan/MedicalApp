{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\react-demo\\\\src\\\\patient\\\\components\\\\patient-form.js\";\nimport React from 'react';\nimport validate from \"../../patient/components/validators/patient-validators\";\nimport Button from \"react-bootstrap/Button\";\nimport * as API_USERS from \"../../patient/api/patient-api\";\nimport APIResponseErrorMessage from \"../../commons/errorhandling/api-response-error-message\";\nimport { Col, Row } from \"reactstrap\";\nimport { FormGroup, Input, Label } from 'reactstrap';\n\nvar PatientForm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(PatientForm, _React$Component);\n\n  function PatientForm(props) {\n    var _this;\n\n    _classCallCheck(this, PatientForm);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PatientForm).call(this, props));\n\n    _this.handleChange = function (event) {\n      var name = event.target.name;\n      var value = event.target.value;\n      var updatedControls = _this.state.formControls;\n      var updatedFormElement = updatedControls[name];\n      updatedFormElement.value = value;\n      updatedFormElement.touched = true;\n      updatedFormElement.valid = validate(value, updatedFormElement.validationRules);\n      updatedControls[name] = updatedFormElement;\n      var formIsValid = true;\n\n      for (var updatedFormElementName in updatedControls) {\n        formIsValid = updatedControls[updatedFormElementName].valid && formIsValid;\n      }\n\n      _this.setState({\n        formControls: updatedControls,\n        formIsValid: formIsValid\n      });\n    };\n\n    _this.toggleForm = _this.toggleForm.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.reloadHandler = _this.props.reloadHandler;\n    _this.state = {\n      errorStatus: 0,\n      error: null,\n      formIsValid: false,\n      formControls: {\n        name: {\n          value: '',\n          placeholder: '',\n          valid: false,\n          touched: false\n        },\n        gender: {\n          value: '',\n          placeholder: '',\n          valid: false,\n          touched: false\n        },\n        date: {\n          value: '',\n          placeholder: '',\n          valid: false,\n          touched: false\n        },\n        address: {\n          value: '',\n          placeholder: '',\n          valid: false,\n          touched: false\n        },\n        medicalRecord: {\n          value: '',\n          placeholder: '',\n          valid: false,\n          touched: false\n        },\n        caregiverID: {\n          value: '',\n          placeholder: '',\n          valid: false,\n          touched: false\n        },\n        medplanid: {\n          value: '',\n          placeholder: '',\n          valid: false,\n          touched: false\n        }\n      }\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(PatientForm, [{\n    key: \"toggleForm\",\n    value: function toggleForm() {\n      this.setState({\n        collapseForm: !this.state.collapseForm\n      });\n    }\n  }, {\n    key: \"registerPatient\",\n    value: function registerPatient(patient) {\n      var _this2 = this;\n\n      console.log(\"PATIENT IS \" + patient);\n      return API_USERS.postPatient(patient, function (result, status, error) {\n        if (result !== null && (status === 200 || status === 201)) {\n          console.log(\"Successfully inserted patient with id: \" + result); //this.reloadHandler();\n        } else {\n          _this2.setState({\n            errorStatus: status,\n            error: error\n          });\n        }\n      });\n    }\n  }, {\n    key: \"findCaregiver\",\n    value: function findCaregiver(name, res) {\n      var _this3 = this;\n\n      return API_USERS.getCaregiverByName(name, function (result, status, error) {\n        if (result !== null && (status === 200 || status === 201)) {\n          console.log(\"Successfully found caregiver with id: \" + result.id); //this.reloadHandler();\n\n          if (res === 1) {\n            console.log(\"RETURNING : \" + result.id);\n            return result.id;\n          }\n        } else {\n          _this3.setState({\n            errorStatus: status,\n            error: error\n          });\n        }\n      });\n    }\n  }, {\n    key: \"findMedPlan\",\n    value: function findMedPlan(period) {\n      var _this4 = this;\n\n      return API_USERS.getMedPlanByPeriod(period, function (result, status, error) {\n        console.log(\"RESULT IS: \" + result.id);\n\n        if (result !== null && (status === 200 || status === 201)) {\n          console.log(\"Successfully found medplanid with id: \" + result); //const updatedControls = this.state.formControls;\n          //updatedControls.medplanid = result.id;\n\n          _this4.state.formControls.medplanid.value = result.id; //this.reloadHandler();\n        } else {\n          _this4.setState({\n            errorStatus: status,\n            error: error\n          });\n        }\n      });\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit() {\n      //const updatedControls = this.state.formControls;\n      //updatedControls.caregiverID = \"ID CHANGED\";\n      //this.setState({formControls: updatedControls});\n      //this.state.formControls.caregiverID.value = \"CHANGYWANGY\";\n      var name = this.state.formControls.caregiverID.value;\n      this.findCaregiver(name, 0);\n      this.state.formControls.caregiverID.value = this.findCaregiver(name, 1);\n      this.findMedPlan(this.state.formControls.medplanid.value);\n      console.log(\"CAREEEEEE: \" + this.state.formControls.caregiverID.value);\n      var patient = {\n        name: this.state.formControls.name.value,\n        gender: this.state.formControls.gender.value,\n        date: this.state.formControls.date.value,\n        address: this.state.formControls.address.value,\n        medicalRecord: this.state.formControls.medicalRecord.value,\n        caregiverID: this.state.formControls.caregiverID.value,\n        medplanid: this.state.formControls.medplanid.value\n      };\n      console.log(patient);\n      this.registerPatient(patient);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        id: \"name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"nameField\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, \" Name: \"), React.createElement(Input, {\n        name: \"name\",\n        id: \"nameField\",\n        placeholder: this.state.formControls.name.placeholder,\n        onChange: this.handleChange,\n        defaultValue: this.state.formControls.name.value,\n        touched: this.state.formControls.name.touched ? 1 : 0,\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      })), React.createElement(FormGroup, {\n        id: \"gender\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"genderField\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, \" Gender: \"), React.createElement(Input, {\n        name: \"gender\",\n        id: \"genderField\",\n        placeholder: this.state.formControls.gender.placeholder,\n        onChange: this.handleChange,\n        defaultValue: this.state.formControls.gender.value,\n        touched: this.state.formControls.gender.touched ? 1 : 0,\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      })), React.createElement(FormGroup, {\n        id: \"date\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"dateField\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      }, \" Birthday: \"), React.createElement(Input, {\n        name: \"date\",\n        id: \"dateField\",\n        placeholder: this.state.formControls.date.placeholder,\n        type: \"date\",\n        onChange: this.handleChange,\n        defaultValue: this.state.formControls.date.value,\n        touched: this.state.formControls.date.touched ? 1 : 0,\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      })), React.createElement(FormGroup, {\n        id: \"address\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"addressField\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220\n        },\n        __self: this\n      }, \" Address: \"), React.createElement(Input, {\n        name: \"address\",\n        id: \"addressField\",\n        placeholder: this.state.formControls.address.placeholder,\n        onChange: this.handleChange,\n        defaultValue: this.state.formControls.address.value,\n        touched: this.state.formControls.address.touched ? 1 : 0,\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221\n        },\n        __self: this\n      })), React.createElement(FormGroup, {\n        id: \"medicalRecord\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"medicalRecordField\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230\n        },\n        __self: this\n      }, \" Record: \"), React.createElement(Input, {\n        name: \"medicalRecord\",\n        id: \"medicalRecordField\",\n        placeholder: this.state.formControls.medicalRecord.placeholder,\n        onChange: this.handleChange,\n        defaultValue: this.state.formControls.medicalRecord.value,\n        touched: this.state.formControls.medicalRecord.touched ? 1 : 0,\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231\n        },\n        __self: this\n      })), React.createElement(FormGroup, {\n        id: \"caregiverID\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"caregiverIDField\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240\n        },\n        __self: this\n      }, \" Caregiver: \"), React.createElement(Input, {\n        name: \"caregiverID\",\n        id: \"caregiverIDField\",\n        placeholder: this.state.formControls.caregiverID.placeholder,\n        onChange: this.handleChange,\n        defaultValue: this.state.formControls.caregiverID.value,\n        touched: this.state.formControls.caregiverID.touched ? 1 : 0,\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241\n        },\n        __self: this\n      })), React.createElement(FormGroup, {\n        id: \"medplanid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"medplanidField\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250\n        },\n        __self: this\n      }, \" Medication Plan: \"), React.createElement(Input, {\n        name: \"medplanid\",\n        id: \"medplanidField\",\n        placeholder: this.state.formControls.medplanid.placeholder,\n        onChange: this.handleChange,\n        defaultValue: this.state.formControls.medplanid.value,\n        touched: this.state.formControls.medplanid.touched ? 1 : 0,\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251\n        },\n        __self: this\n      })), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260\n        },\n        __self: this\n      }, React.createElement(Col, {\n        sm: {\n          size: '4',\n          offset: 8\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261\n        },\n        __self: this\n      }, React.createElement(Button, {\n        type: \"submit\",\n        onClick: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262\n        },\n        __self: this\n      }, \"  Submit \"))));\n    }\n  }]);\n\n  return PatientForm;\n}(React.Component);\n\nexport default PatientForm;","map":{"version":3,"sources":["C:\\Users\\user\\Desktop\\CSC - anul 2\\SD\\SpringPractice\\react-demo\\src\\patient\\components\\patient-form.js"],"names":["React","validate","Button","API_USERS","APIResponseErrorMessage","Col","Row","FormGroup","Input","Label","PatientForm","props","handleChange","event","name","target","value","updatedControls","state","formControls","updatedFormElement","touched","valid","validationRules","formIsValid","updatedFormElementName","setState","toggleForm","bind","reloadHandler","errorStatus","error","placeholder","gender","date","address","medicalRecord","caregiverID","medplanid","handleSubmit","collapseForm","patient","console","log","postPatient","result","status","res","getCaregiverByName","id","period","getMedPlanByPeriod","findCaregiver","findMedPlan","registerPatient","size","offset","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport validate from \"../../patient/components/validators/patient-validators\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport * as API_USERS from \"../../patient/api/patient-api\";\r\nimport APIResponseErrorMessage from \"../../commons/errorhandling/api-response-error-message\";\r\nimport {Col, Row} from \"reactstrap\";\r\nimport { FormGroup, Input, Label} from 'reactstrap';\r\n\r\n\r\nclass PatientForm extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.toggleForm = this.toggleForm.bind(this);\r\n        this.reloadHandler = this.props.reloadHandler;\r\n\r\n        this.state = {\r\n\r\n            errorStatus: 0,\r\n            error: null,\r\n\r\n            formIsValid: false,\r\n\r\n            formControls: {\r\n                name: {\r\n                    value: '',\r\n                    placeholder: '',\r\n                    valid: false,\r\n                    touched: false,\r\n                },\r\n                gender: {\r\n                    value: '',\r\n                    placeholder: '',\r\n                    valid: false,\r\n                    touched: false,\r\n                },\r\n                date: {\r\n                    value: '',\r\n                    placeholder: '',\r\n                    valid: false,\r\n                    touched: false,\r\n                },\r\n                address: {\r\n                    value: '',\r\n                    placeholder: '',\r\n                    valid: false,\r\n                    touched: false,\r\n                },\r\n                medicalRecord: {\r\n                    value: '',\r\n                    placeholder: '',\r\n                    valid: false,\r\n                    touched: false,\r\n                },\r\n                caregiverID: {\r\n                    value: '',\r\n                    placeholder: '',\r\n                    valid: false,\r\n                    touched: false,\r\n                },\r\n                medplanid: {\r\n                    value: '',\r\n                    placeholder: '',\r\n                    valid: false,\r\n                    touched: false,\r\n                },\r\n\r\n            }\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    toggleForm() {\r\n        this.setState({collapseForm: !this.state.collapseForm});\r\n    }\r\n\r\n\r\n    handleChange = event => {\r\n\r\n        const name = event.target.name;\r\n        const value = event.target.value;\r\n\r\n        const updatedControls = this.state.formControls;\r\n\r\n        const updatedFormElement = updatedControls[name];\r\n\r\n        updatedFormElement.value = value;\r\n        updatedFormElement.touched = true;\r\n        updatedFormElement.valid = validate(value, updatedFormElement.validationRules);\r\n        updatedControls[name] = updatedFormElement;\r\n\r\n        let formIsValid = true;\r\n        for (let updatedFormElementName in updatedControls) {\r\n            formIsValid = updatedControls[updatedFormElementName].valid && formIsValid;\r\n        }\r\n\r\n        this.setState({\r\n            formControls: updatedControls,\r\n            formIsValid: formIsValid\r\n        });\r\n\r\n    };\r\n\r\n    registerPatient(patient) {\r\n        console.log(\"PATIENT IS \" + patient);\r\n        return API_USERS.postPatient(patient, (result, status, error) => {\r\n            if (result !== null && (status === 200 || status === 201)) {\r\n                console.log(\"Successfully inserted patient with id: \" + result);\r\n                //this.reloadHandler();\r\n            } else {\r\n                this.setState(({\r\n                    errorStatus: status,\r\n                    error: error\r\n                }));\r\n            }\r\n        });\r\n    }\r\n\r\n    findCaregiver(name, res) {\r\n        return API_USERS.getCaregiverByName(name, (result, status, error) => {\r\n            if (result !== null && (status === 200 || status === 201)) {\r\n                console.log(\"Successfully found caregiver with id: \" + result.id);\r\n                //this.reloadHandler();\r\n                if(res===1)\r\n                {\r\n                    console.log(\"RETURNING : \" + result.id);\r\n                    return result.id;\r\n                }\r\n            } else {\r\n                this.setState(({\r\n                    errorStatus: status,\r\n                    error: error\r\n                }));\r\n            }\r\n        });\r\n    }\r\n\r\n    findMedPlan(period) {\r\n        return API_USERS.getMedPlanByPeriod(period, (result, status, error) => {\r\n            console.log(\"RESULT IS: \" + result.id);\r\n            if (result !== null && (status === 200 || status === 201)) {\r\n                console.log(\"Successfully found medplanid with id: \" + result);\r\n                //const updatedControls = this.state.formControls;\r\n                //updatedControls.medplanid = result.id;\r\n                this.state.formControls.medplanid.value = result.id;\r\n\r\n                //this.reloadHandler();\r\n            } else {\r\n                this.setState(({\r\n                    errorStatus: status,\r\n                    error: error\r\n                }));\r\n            }\r\n        });\r\n    }\r\n\r\n    handleSubmit() {\r\n        //const updatedControls = this.state.formControls;\r\n        //updatedControls.caregiverID = \"ID CHANGED\";\r\n        //this.setState({formControls: updatedControls});\r\n        //this.state.formControls.caregiverID.value = \"CHANGYWANGY\";\r\n        let name = this.state.formControls.caregiverID.value;\r\n        this.findCaregiver(name, 0);\r\n        this.state.formControls.caregiverID.value = this.findCaregiver(name, 1);\r\n        this.findMedPlan(this.state.formControls.medplanid.value);\r\n        console.log(\"CAREEEEEE: \" + this.state.formControls.caregiverID.value);\r\n\r\n        let patient = {\r\n            name: this.state.formControls.name.value,\r\n            gender: this.state.formControls.gender.value,\r\n            date: this.state.formControls.date.value,\r\n            address: this.state.formControls.address.value,\r\n            medicalRecord: this.state.formControls.medicalRecord.value,\r\n            caregiverID: this.state.formControls.caregiverID.value,\r\n            medplanid: this.state.formControls.medplanid.value\r\n        };\r\n\r\n        console.log(patient);\r\n        this.registerPatient(patient);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n\r\n                <FormGroup id='name'>\r\n                    <Label for='nameField'> Name: </Label>\r\n                    <Input name='name' id='nameField' placeholder={this.state.formControls.name.placeholder}\r\n                           onChange={this.handleChange}\r\n                           defaultValue={this.state.formControls.name.value}\r\n                           touched={this.state.formControls.name.touched? 1 : 0}\r\n                           required\r\n                    />\r\n                </FormGroup>\r\n\r\n                <FormGroup id='gender'>\r\n                    <Label for='genderField'> Gender: </Label>\r\n                    <Input name='gender' id='genderField' placeholder={this.state.formControls.gender.placeholder}\r\n                           onChange={this.handleChange}\r\n                           defaultValue={this.state.formControls.gender.value}\r\n                           touched={this.state.formControls.gender.touched? 1 : 0}\r\n                           required\r\n                    />\r\n                </FormGroup>\r\n\r\n                <FormGroup id='date'>\r\n                    <Label for='dateField'> Birthday: </Label>\r\n                    <Input name='date' id='dateField' placeholder={this.state.formControls.date.placeholder}\r\n                           type=\"date\"\r\n                           onChange={this.handleChange}\r\n                           defaultValue={this.state.formControls.date.value}\r\n                           touched={this.state.formControls.date.touched? 1 : 0}\r\n                           required\r\n                    />\r\n                </FormGroup>\r\n\r\n                <FormGroup id='address'>\r\n                    <Label for='addressField'> Address: </Label>\r\n                    <Input name='address' id='addressField' placeholder={this.state.formControls.address.placeholder}\r\n                           onChange={this.handleChange}\r\n                           defaultValue={this.state.formControls.address.value}\r\n                           touched={this.state.formControls.address.touched? 1 : 0}\r\n                           required\r\n                    />\r\n                </FormGroup>\r\n\r\n                <FormGroup id='medicalRecord'>\r\n                    <Label for='medicalRecordField'> Record: </Label>\r\n                    <Input name='medicalRecord' id='medicalRecordField' placeholder={this.state.formControls.medicalRecord.placeholder}\r\n                           onChange={this.handleChange}\r\n                           defaultValue={this.state.formControls.medicalRecord.value}\r\n                           touched={this.state.formControls.medicalRecord.touched? 1 : 0}\r\n                           required\r\n                    />\r\n                </FormGroup>\r\n\r\n                <FormGroup id='caregiverID'>\r\n                    <Label for='caregiverIDField'> Caregiver: </Label>\r\n                    <Input name='caregiverID' id='caregiverIDField' placeholder={this.state.formControls.caregiverID.placeholder}\r\n                           onChange={this.handleChange}\r\n                           defaultValue={this.state.formControls.caregiverID.value}\r\n                           touched={this.state.formControls.caregiverID.touched? 1 : 0}\r\n                           required\r\n                    />\r\n                </FormGroup>\r\n\r\n                <FormGroup id='medplanid'>\r\n                    <Label for='medplanidField'> Medication Plan: </Label>\r\n                    <Input name='medplanid' id='medplanidField' placeholder={this.state.formControls.medplanid.placeholder}\r\n                           onChange={this.handleChange}\r\n                           defaultValue={this.state.formControls.medplanid.value}\r\n                           touched={this.state.formControls.medplanid.touched? 1 : 0}\r\n                           required\r\n                    />\r\n                </FormGroup>\r\n\r\n\r\n                    <Row>\r\n                        <Col sm={{size: '4', offset: 8}}>\r\n                            <Button type={\"submit\"} onClick={this.handleSubmit}>  Submit </Button>\r\n                        </Col>\r\n                    </Row>\r\n            </div>\r\n        ) ;\r\n    }\r\n}\r\n\r\nexport default PatientForm;\r\n"]},"metadata":{},"sourceType":"module"}