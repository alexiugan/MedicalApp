{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\med-app-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\med-app-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\med-app-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\med-app-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\med-app-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\med-app-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\med-app-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\med-app-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\med-app-frontend\\\\src\\\\medicationPlan\\\\medication-plan-container.js\";\nimport React from 'react';\nimport APIResponseErrorMessage from \"../commons/errorhandling/api-response-error-message\";\nimport { Button, Card, CardHeader, Col, Modal, ModalBody, ModalHeader, Row } from 'reactstrap';\nimport MedicationPlanForm from \"./medication-plan-form\";\nimport * as API_USERS from \"./medication-plan-api\";\nimport MedicationPlanTable from \"./medication-plan-table\";\nimport MedicationPlanRemoveForm from \"./medication-plan-remove-form\";\nimport MedicationPlanUpdateForm from \"./medication-plan-update-form\";\nimport AddMedForm from \"./medication-plan-add-med\";\nimport PatientContainer from \"../patient/patient-container\";\nvar buttonStyle = {\n  marginLeft: \"10px\"\n};\n\nvar MedicationPlanContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(MedicationPlanContainer, _React$Component);\n\n  function MedicationPlanContainer(props) {\n    var _this;\n\n    _classCallCheck(this, MedicationPlanContainer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MedicationPlanContainer).call(this, props));\n    _this.toggleForm = _this.toggleForm.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.toggleRemove = _this.toggleRemove.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.toggleUpdate = _this.toggleUpdate.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.toggleAddMed = _this.toggleAddMed.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.reload = _this.reload.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.state = {\n      addMed: false,\n      removeMedicationPlan: false,\n      updateMedicationPlan: false,\n      selected: false,\n      collapseForm: false,\n      tableData: [],\n      isLoaded: false,\n      errorStatus: 0,\n      error: null\n    };\n    return _this;\n  }\n\n  _createClass(MedicationPlanContainer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fetchMedicationPlans();\n    }\n  }, {\n    key: \"fetchMedicationPlans\",\n    value: function () {\n      var _fetchMedicationPlans = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var _this2 = this;\n\n        var data, name, medplanid, medplan;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                data = localStorage.getItem(\"role\");\n\n                if (!(data === \"0\" || data === \"1\")) {\n                  _context.next = 5;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", API_USERS.getMedicationPlans(function (result, status, err) {\n                  if (result !== null && status === 200) {\n                    _this2.setState({\n                      tableData: result,\n                      isLoaded: true\n                    });\n                  } else {\n                    _this2.setState({\n                      errorStatus: status,\n                      error: err\n                    });\n                  }\n                }));\n\n              case 5:\n                if (!(data === \"2\")) {\n                  _context.next = 14;\n                  break;\n                }\n\n                name = localStorage.getItem(\"name\");\n                _context.next = 9;\n                return this.getPatient(name);\n\n              case 9:\n                medplanid = _context.sent;\n                medplan = {\n                  id: medplanid\n                };\n                console.log(\"ID IS: \" + medplanid);\n                _context.next = 14;\n                return this.getMedPlan(medplan);\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function fetchMedicationPlans() {\n        return _fetchMedicationPlans.apply(this, arguments);\n      }\n\n      return fetchMedicationPlans;\n    }()\n  }, {\n    key: \"getMedPlan\",\n    value: function getMedPlan(medplan) {\n      var _this3 = this;\n\n      return new Promise(function (resolve, reject) {\n        return API_USERS.getMedicationPlanByID(medplan, function (result, status, err) {\n          if (result !== null && status === 200) {\n            _this3.setState({\n              tableData: result,\n              isLoaded: true\n            });\n          } else {\n            _this3.setState({\n              errorStatus: status,\n              error: err\n            });\n          }\n        });\n      });\n    }\n  }, {\n    key: \"getPatient\",\n    value: function getPatient(name) {\n      return new Promise(function (resolve, reject) {\n        API_USERS.getPatient(name, function (result, status, error) {\n          if (result !== null && (status === 200 || status === 201)) {\n            resolve(result.medplanid);\n          } else {\n            reject(error);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"toggleForm\",\n    value: function toggleForm() {\n      this.setState({\n        selected: !this.state.selected\n      });\n    }\n  }, {\n    key: \"toggleRemove\",\n    value: function toggleRemove() {\n      this.setState({\n        removeMedicationPlan: !this.state.removeMedicationPlan\n      });\n    }\n  }, {\n    key: \"toggleUpdate\",\n    value: function toggleUpdate() {\n      this.setState({\n        updateMedicationPlan: !this.state.updateMedicationPlan\n      });\n    }\n  }, {\n    key: \"toggleAddMed\",\n    value: function toggleAddMed() {\n      this.setState({\n        addMed: !this.state.addMed\n      });\n    }\n  }, {\n    key: \"reload\",\n    value: function reload() {\n      this.setState({\n        isLoaded: false\n      });\n      this.setState({\n        addMed: false,\n        selected: false,\n        removeMedicationPlan: false,\n        updateMedicationPlan: false\n      });\n      this.fetchMedicationPlans();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var data = localStorage.getItem(\"role\");\n\n      if (data === \"0\") {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 146\n          },\n          __self: this\n        }, React.createElement(CardHeader, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 147\n          },\n          __self: this\n        }, React.createElement(\"strong\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 148\n          },\n          __self: this\n        }, \"Medication Plans\")), React.createElement(Card, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 150\n          },\n          __self: this\n        }, React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 151\n          },\n          __self: this\n        }), React.createElement(Row, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 152\n          },\n          __self: this\n        }, React.createElement(Col, {\n          sm: {\n            size: '8',\n            offset: 1\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 153\n          },\n          __self: this\n        }, React.createElement(Button, {\n          color: \"primary\",\n          onClick: this.toggleForm,\n          style: buttonStyle,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 154\n          },\n          __self: this\n        }, \"Add Medication Plan\"), React.createElement(Button, {\n          color: \"primary\",\n          onClick: this.toggleRemove,\n          style: buttonStyle,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 155\n          },\n          __self: this\n        }, \"Remove Medication Plan \"), React.createElement(Button, {\n          color: \"primary\",\n          onClick: this.toggleUpdate,\n          style: buttonStyle,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 156\n          },\n          __self: this\n        }, \"Update Medication Plan\"), React.createElement(Button, {\n          color: \"primary\",\n          onClick: this.toggleAddMed,\n          style: buttonStyle,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157\n          },\n          __self: this\n        }, \"Add Medication to Plan\"))), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 160\n          },\n          __self: this\n        }), React.createElement(Row, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 161\n          },\n          __self: this\n        }, React.createElement(Col, {\n          sm: {\n            size: '8',\n            offset: 1\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 162\n          },\n          __self: this\n        }, this.state.isLoaded && React.createElement(MedicationPlanTable, {\n          tableData: this.state.tableData,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 163\n          },\n          __self: this\n        }), this.state.errorStatus > 0 && React.createElement(APIResponseErrorMessage, {\n          errorStatus: this.state.errorStatus,\n          error: this.state.error,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 164\n          },\n          __self: this\n        })))), React.createElement(Modal, {\n          isOpen: this.state.selected,\n          toggle: this.toggleForm,\n          className: this.props.className,\n          size: \"lg\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 172\n          },\n          __self: this\n        }, React.createElement(ModalHeader, {\n          toggle: this.toggleForm,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 174\n          },\n          __self: this\n        }, \" Add Medication Plan: \"), React.createElement(ModalBody, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 175\n          },\n          __self: this\n        }, React.createElement(MedicationPlanForm, {\n          reloadHandler: this.reload,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 176\n          },\n          __self: this\n        }))), React.createElement(Modal, {\n          isOpen: this.state.removeMedicationPlan,\n          toggle: this.toggleRemove,\n          className: this.props.className,\n          size: \"lg\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 180\n          },\n          __self: this\n        }, React.createElement(ModalHeader, {\n          toggle: this.toggleRemove,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 182\n          },\n          __self: this\n        }, \" Remove Medication Plan: \"), React.createElement(ModalBody, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 183\n          },\n          __self: this\n        }, React.createElement(MedicationPlanRemoveForm, {\n          reloadHandler: this.reload,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 184\n          },\n          __self: this\n        }))), React.createElement(Modal, {\n          isOpen: this.state.updateMedicationPlan,\n          toggle: this.toggleUpdate,\n          className: this.props.className,\n          size: \"lg\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 188\n          },\n          __self: this\n        }, React.createElement(ModalHeader, {\n          toggle: this.toggleUpdate,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 190\n          },\n          __self: this\n        }, \" Update Medication Plan: \"), React.createElement(ModalBody, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 191\n          },\n          __self: this\n        }, React.createElement(MedicationPlanUpdateForm, {\n          reloadHandler: this.reload,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 192\n          },\n          __self: this\n        }))), React.createElement(Modal, {\n          isOpen: this.state.addMed,\n          toggle: this.toggleAddMed,\n          className: this.props.className,\n          size: \"lg\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 196\n          },\n          __self: this\n        }, React.createElement(ModalHeader, {\n          toggle: this.toggleAddMed,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 198\n          },\n          __self: this\n        }, \" Add Medication to Plan: \"), React.createElement(ModalBody, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 199\n          },\n          __self: this\n        }, React.createElement(AddMedForm, {\n          reloadHandler: this.reload,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 200\n          },\n          __self: this\n        }))));\n      } else if (data === \"1\") {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 208\n          },\n          __self: this\n        }, React.createElement(CardHeader, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 209\n          },\n          __self: this\n        }, React.createElement(\"strong\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 210\n          },\n          __self: this\n        }, \"Medication Plans\")), React.createElement(Card, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 212\n          },\n          __self: this\n        }, React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 213\n          },\n          __self: this\n        }), React.createElement(Row, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 214\n          },\n          __self: this\n        }, React.createElement(Col, {\n          sm: {\n            size: '8',\n            offset: 1\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 215\n          },\n          __self: this\n        }, React.createElement(Button, {\n          color: \"primary\",\n          onClick: this.toggleForm,\n          style: buttonStyle,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 216\n          },\n          __self: this\n        }, \"Add Medication Plan\"), React.createElement(Button, {\n          color: \"primary\",\n          onClick: this.toggleRemove,\n          style: buttonStyle,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 217\n          },\n          __self: this\n        }, \"Remove Medication Plan \"), React.createElement(Button, {\n          color: \"primary\",\n          onClick: this.toggleUpdate,\n          style: buttonStyle,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 218\n          },\n          __self: this\n        }, \"Update Medication Plan\"), React.createElement(Button, {\n          color: \"primary\",\n          onClick: this.toggleAddMed,\n          style: buttonStyle,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 219\n          },\n          __self: this\n        }, \"Add Medication to Plan\"))), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 222\n          },\n          __self: this\n        }), React.createElement(Row, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 223\n          },\n          __self: this\n        }, React.createElement(Col, {\n          sm: {\n            size: '8',\n            offset: 1\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 224\n          },\n          __self: this\n        }, this.state.isLoaded && React.createElement(MedicationPlanTable, {\n          tableData: this.state.tableData,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 225\n          },\n          __self: this\n        }), this.state.errorStatus > 0 && React.createElement(APIResponseErrorMessage, {\n          errorStatus: this.state.errorStatus,\n          error: this.state.error,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 226\n          },\n          __self: this\n        })))));\n      } else if (data === \"2\") {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 239\n          },\n          __self: this\n        }, React.createElement(CardHeader, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 240\n          },\n          __self: this\n        }, React.createElement(\"strong\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 241\n          },\n          __self: this\n        }, \"Medication Plans\")), React.createElement(Card, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 243\n          },\n          __self: this\n        }, React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 244\n          },\n          __self: this\n        }), React.createElement(Row, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 245\n          },\n          __self: this\n        }, React.createElement(Col, {\n          sm: {\n            size: '8',\n            offset: 1\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 246\n          },\n          __self: this\n        }, this.state.isLoaded && React.createElement(MedicationPlanTable, {\n          tableData: this.state.tableData,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 247\n          },\n          __self: this\n        }), this.state.errorStatus > 0 && React.createElement(APIResponseErrorMessage, {\n          errorStatus: this.state.errorStatus,\n          error: this.state.error,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 248\n          },\n          __self: this\n        })))));\n      } else {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 261\n          },\n          __self: this\n        }, React.createElement(CardHeader, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 262\n          },\n          __self: this\n        }, React.createElement(\"strong\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 263\n          },\n          __self: this\n        }, \" Medication Plans \")), React.createElement(\"h1\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 265\n          },\n          __self: this\n        }, \"Access not allowed!\"));\n      }\n    }\n  }]);\n\n  return MedicationPlanContainer;\n}(React.Component);\n\nexport default MedicationPlanContainer;","map":{"version":3,"sources":["C:\\Users\\user\\Desktop\\CSC - anul 2\\SD\\SpringPractice\\med-app-frontend\\src\\medicationPlan\\medication-plan-container.js"],"names":["React","APIResponseErrorMessage","Button","Card","CardHeader","Col","Modal","ModalBody","ModalHeader","Row","MedicationPlanForm","API_USERS","MedicationPlanTable","MedicationPlanRemoveForm","MedicationPlanUpdateForm","AddMedForm","PatientContainer","buttonStyle","marginLeft","MedicationPlanContainer","props","toggleForm","bind","toggleRemove","toggleUpdate","toggleAddMed","reload","state","addMed","removeMedicationPlan","updateMedicationPlan","selected","collapseForm","tableData","isLoaded","errorStatus","error","fetchMedicationPlans","data","localStorage","getItem","getMedicationPlans","result","status","err","setState","name","getPatient","medplanid","medplan","id","console","log","getMedPlan","Promise","resolve","reject","getMedicationPlanByID","size","offset","className","Component"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,uBAAP,MAAoC,qDAApC;AACA,SACIC,MADJ,EAEIC,IAFJ,EAGIC,UAHJ,EAIIC,GAJJ,EAKIC,KALJ,EAMIC,SANJ,EAOIC,WAPJ,EAQIC,GARJ,QASO,YATP;AAUA,OAAOC,kBAAP,MAA+B,wBAA/B;AAEA,OAAO,KAAKC,SAAZ,MAA2B,uBAA3B;AACA,OAAOC,mBAAP,MAAgC,yBAAhC;AACA,OAAOC,wBAAP,MAAqC,+BAArC;AACA,OAAOC,wBAAP,MAAqC,+BAArC;AACA,OAAOC,UAAP,MAAuB,2BAAvB;AACA,OAAOC,gBAAP,MAA6B,8BAA7B;AAEA,IAAMC,WAAW,GAAG;AAChBC,EAAAA,UAAU,EAAC;AADK,CAApB;;IAIMC,uB;;;;;AAEF,mCAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,iGAAMA,KAAN;AACA,UAAKC,UAAL,GAAkB,MAAKA,UAAL,CAAgBC,IAAhB,uDAAlB;AACA,UAAKC,YAAL,GAAoB,MAAKA,YAAL,CAAkBD,IAAlB,uDAApB;AACA,UAAKE,YAAL,GAAoB,MAAKA,YAAL,CAAkBF,IAAlB,uDAApB;AACA,UAAKG,YAAL,GAAoB,MAAKA,YAAL,CAAkBH,IAAlB,uDAApB;AACA,UAAKI,MAAL,GAAc,MAAKA,MAAL,CAAYJ,IAAZ,uDAAd;AACA,UAAKK,KAAL,GAAa;AACTC,MAAAA,MAAM,EAAE,KADC;AAETC,MAAAA,oBAAoB,EAAE,KAFb;AAGTC,MAAAA,oBAAoB,EAAE,KAHb;AAITC,MAAAA,QAAQ,EAAE,KAJD;AAKTC,MAAAA,YAAY,EAAE,KALL;AAMTC,MAAAA,SAAS,EAAE,EANF;AAOTC,MAAAA,QAAQ,EAAE,KAPD;AAQTC,MAAAA,WAAW,EAAE,CARJ;AASTC,MAAAA,KAAK,EAAE;AATE,KAAb;AAPe;AAkBlB;;;;wCAEmB;AAChB,WAAKC,oBAAL;AACH;;;;;;;;;;;;;;AAGOC,gBAAAA,I,GAAOC,YAAY,CAACC,OAAb,CAAqB,MAArB,C;;sBACPF,IAAI,KAAK,GAAT,IAAgBA,IAAI,KAAK,G;;;;;iDAClB3B,SAAS,CAAC8B,kBAAV,CAA6B,UAACC,MAAD,EAASC,MAAT,EAAiBC,GAAjB,EAAyB;AAEzD,sBAAIF,MAAM,KAAK,IAAX,IAAmBC,MAAM,KAAK,GAAlC,EAAuC;AACnC,oBAAA,MAAI,CAACE,QAAL,CAAc;AACVZ,sBAAAA,SAAS,EAAES,MADD;AAEVR,sBAAAA,QAAQ,EAAE;AAFA,qBAAd;AAIH,mBALD,MAKO;AACH,oBAAA,MAAI,CAACW,QAAL,CAAe;AACXV,sBAAAA,WAAW,EAAEQ,MADF;AAEXP,sBAAAA,KAAK,EAAEQ;AAFI,qBAAf;AAIH;AACJ,iBAbM,C;;;sBAcAN,IAAI,KAAK,G;;;;;AACZQ,gBAAAA,I,GAAOP,YAAY,CAACC,OAAb,CAAqB,MAArB,C;;uBACW,KAAKO,UAAL,CAAgBD,IAAhB,C;;;AAAlBE,gBAAAA,S;AACAC,gBAAAA,O,GAAU;AACVC,kBAAAA,EAAE,EAAEF;AADM,iB;AAGdG,gBAAAA,OAAO,CAACC,GAAR,CAAY,YAAYJ,SAAxB;;uBAEM,KAAKK,UAAL,CAAgBJ,OAAhB,C;;;;;;;;;;;;;;;;;;+BAIHA,O,EAAQ;AAAA;;AACf,aAAO,IAAIK,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,eAAO7C,SAAS,CAAC8C,qBAAV,CAAgCR,OAAhC,EAAyC,UAACP,MAAD,EAASC,MAAT,EAAiBC,GAAjB,EAAyB;AAErE,cAAIF,MAAM,KAAK,IAAX,IAAmBC,MAAM,KAAK,GAAlC,EAAuC;AACnC,YAAA,MAAI,CAACE,QAAL,CAAc;AACVZ,cAAAA,SAAS,EAAES,MADD;AAEVR,cAAAA,QAAQ,EAAE;AAFA,aAAd;AAIH,WALD,MAKO;AACH,YAAA,MAAI,CAACW,QAAL,CAAe;AACXV,cAAAA,WAAW,EAAEQ,MADF;AAEXP,cAAAA,KAAK,EAAEQ;AAFI,aAAf;AAIH;AACJ,SAbM,CAAP;AAcH,OAfM,CAAP;AAgBH;;;+BAEUE,I,EAAK;AACZ,aAAO,IAAIQ,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC7C,QAAAA,SAAS,CAACoC,UAAV,CAAqBD,IAArB,EAA2B,UAACJ,MAAD,EAASC,MAAT,EAAiBP,KAAjB,EAA2B;AAClD,cAAIM,MAAM,KAAK,IAAX,KAAoBC,MAAM,KAAK,GAAX,IAAkBA,MAAM,KAAK,GAAjD,CAAJ,EAA2D;AACvDY,YAAAA,OAAO,CAACb,MAAM,CAACM,SAAR,CAAP;AACH,WAFD,MAEO;AACHQ,YAAAA,MAAM,CAACpB,KAAD,CAAN;AACH;AACJ,SAND;AAOH,OARM,CAAP;AASH;;;iCAEY;AACT,WAAKS,QAAL,CAAc;AAACd,QAAAA,QAAQ,EAAE,CAAC,KAAKJ,KAAL,CAAWI;AAAvB,OAAd;AACH;;;mCAEc;AACX,WAAKc,QAAL,CAAc;AAAChB,QAAAA,oBAAoB,EAAE,CAAC,KAAKF,KAAL,CAAWE;AAAnC,OAAd;AACH;;;mCAEc;AACX,WAAKgB,QAAL,CAAc;AAACf,QAAAA,oBAAoB,EAAE,CAAC,KAAKH,KAAL,CAAWG;AAAnC,OAAd;AACH;;;mCAEc;AACX,WAAKe,QAAL,CAAc;AAACjB,QAAAA,MAAM,EAAE,CAAC,KAAKD,KAAL,CAAWC;AAArB,OAAd;AACH;;;6BAGQ;AACL,WAAKiB,QAAL,CAAc;AACVX,QAAAA,QAAQ,EAAE;AADA,OAAd;AAGA,WAAKW,QAAL,CAAc;AACVjB,QAAAA,MAAM,EAAC,KADG;AAEVG,QAAAA,QAAQ,EAAE,KAFA;AAGVF,QAAAA,oBAAoB,EAAE,KAHZ;AAIVC,QAAAA,oBAAoB,EAAE;AAJZ,OAAd;AAMA,WAAKO,oBAAL;AACH;;;6BAEQ;AACL,UAAIC,IAAI,GAAGC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX;;AACA,UAAGF,IAAI,KAAK,GAAZ,EAAgB;AACZ,eACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BADJ,CADJ,EAII,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,EAEI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,GAAD;AAAK,UAAA,EAAE,EAAE;AAACoB,YAAAA,IAAI,EAAE,GAAP;AAAYC,YAAAA,MAAM,EAAE;AAApB,WAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,MAAD;AAAQ,UAAA,KAAK,EAAC,SAAd;AAAwB,UAAA,OAAO,EAAE,KAAKtC,UAAtC;AAAkD,UAAA,KAAK,EAAEJ,WAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCADJ,EAEI,oBAAC,MAAD;AAAQ,UAAA,KAAK,EAAC,SAAd;AAAwB,UAAA,OAAO,EAAE,KAAKM,YAAtC;AAAoD,UAAA,KAAK,EAAEN,WAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAFJ,EAGI,oBAAC,MAAD;AAAQ,UAAA,KAAK,EAAC,SAAd;AAAwB,UAAA,OAAO,EAAE,KAAKO,YAAtC;AAAoD,UAAA,KAAK,EAAEP,WAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAHJ,EAII,oBAAC,MAAD;AAAQ,UAAA,KAAK,EAAC,SAAd;AAAwB,UAAA,OAAO,EAAE,KAAKQ,YAAtC;AAAoD,UAAA,KAAK,EAAER,WAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAJJ,CADJ,CAFJ,EAUI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAVJ,EAWI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,GAAD;AAAK,UAAA,EAAE,EAAE;AAACyC,YAAAA,IAAI,EAAE,GAAP;AAAYC,YAAAA,MAAM,EAAE;AAApB,WAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACK,KAAKhC,KAAL,CAAWO,QAAX,IAAuB,oBAAC,mBAAD;AAAqB,UAAA,SAAS,EAAI,KAAKP,KAAL,CAAWM,SAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAD5B,EAEK,KAAKN,KAAL,CAAWQ,WAAX,GAAyB,CAAzB,IAA8B,oBAAC,uBAAD;AAC3B,UAAA,WAAW,EAAE,KAAKR,KAAL,CAAWQ,WADG;AAE3B,UAAA,KAAK,EAAE,KAAKR,KAAL,CAAWS,KAFS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFnC,CADJ,CAXJ,CAJJ,EA0BI,oBAAC,KAAD;AAAO,UAAA,MAAM,EAAE,KAAKT,KAAL,CAAWI,QAA1B;AAAoC,UAAA,MAAM,EAAE,KAAKV,UAAjD;AACO,UAAA,SAAS,EAAE,KAAKD,KAAL,CAAWwC,SAD7B;AACwC,UAAA,IAAI,EAAC,IAD7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAEI,oBAAC,WAAD;AAAa,UAAA,MAAM,EAAE,KAAKvC,UAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAFJ,EAGI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,kBAAD;AAAoB,UAAA,aAAa,EAAE,KAAKK,MAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,CAHJ,CA1BJ,EAkCI,oBAAC,KAAD;AAAO,UAAA,MAAM,EAAE,KAAKC,KAAL,CAAWE,oBAA1B;AAAgD,UAAA,MAAM,EAAE,KAAKN,YAA7D;AACO,UAAA,SAAS,EAAE,KAAKH,KAAL,CAAWwC,SAD7B;AACwC,UAAA,IAAI,EAAC,IAD7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAEI,oBAAC,WAAD;AAAa,UAAA,MAAM,EAAE,KAAKrC,YAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCAFJ,EAGI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,wBAAD;AAA0B,UAAA,aAAa,EAAE,KAAKG,MAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,CAHJ,CAlCJ,EA0CI,oBAAC,KAAD;AAAO,UAAA,MAAM,EAAE,KAAKC,KAAL,CAAWG,oBAA1B;AAAgD,UAAA,MAAM,EAAE,KAAKN,YAA7D;AACO,UAAA,SAAS,EAAE,KAAKJ,KAAL,CAAWwC,SAD7B;AACwC,UAAA,IAAI,EAAC,IAD7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAEI,oBAAC,WAAD;AAAa,UAAA,MAAM,EAAE,KAAKpC,YAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCAFJ,EAGI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,wBAAD;AAA0B,UAAA,aAAa,EAAE,KAAKE,MAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,CAHJ,CA1CJ,EAkDI,oBAAC,KAAD;AAAO,UAAA,MAAM,EAAE,KAAKC,KAAL,CAAWC,MAA1B;AAAkC,UAAA,MAAM,EAAE,KAAKH,YAA/C;AACO,UAAA,SAAS,EAAE,KAAKL,KAAL,CAAWwC,SAD7B;AACwC,UAAA,IAAI,EAAC,IAD7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAEI,oBAAC,WAAD;AAAa,UAAA,MAAM,EAAE,KAAKnC,YAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCAFJ,EAGI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,UAAD;AAAY,UAAA,aAAa,EAAE,KAAKC,MAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,CAHJ,CAlDJ,CADJ;AA4DE,OA7DN,MA8DK,IAAGY,IAAI,KAAK,GAAZ,EAAgB;AACjB,eACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BADJ,CADJ,EAII,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,EAEI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,GAAD;AAAK,UAAA,EAAE,EAAE;AAACoB,YAAAA,IAAI,EAAE,GAAP;AAAYC,YAAAA,MAAM,EAAE;AAApB,WAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,MAAD;AAAQ,UAAA,KAAK,EAAC,SAAd;AAAwB,UAAA,OAAO,EAAE,KAAKtC,UAAtC;AAAkD,UAAA,KAAK,EAAEJ,WAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCADJ,EAEI,oBAAC,MAAD;AAAQ,UAAA,KAAK,EAAC,SAAd;AAAwB,UAAA,OAAO,EAAE,KAAKM,YAAtC;AAAoD,UAAA,KAAK,EAAEN,WAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAFJ,EAGI,oBAAC,MAAD;AAAQ,UAAA,KAAK,EAAC,SAAd;AAAwB,UAAA,OAAO,EAAE,KAAKO,YAAtC;AAAoD,UAAA,KAAK,EAAEP,WAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAHJ,EAII,oBAAC,MAAD;AAAQ,UAAA,KAAK,EAAC,SAAd;AAAwB,UAAA,OAAO,EAAE,KAAKQ,YAAtC;AAAoD,UAAA,KAAK,EAAER,WAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAJJ,CADJ,CAFJ,EAUI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAVJ,EAWI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,GAAD;AAAK,UAAA,EAAE,EAAE;AAACyC,YAAAA,IAAI,EAAE,GAAP;AAAYC,YAAAA,MAAM,EAAE;AAApB,WAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACK,KAAKhC,KAAL,CAAWO,QAAX,IAAuB,oBAAC,mBAAD;AAAqB,UAAA,SAAS,EAAI,KAAKP,KAAL,CAAWM,SAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAD5B,EAEK,KAAKN,KAAL,CAAWQ,WAAX,GAAyB,CAAzB,IAA8B,oBAAC,uBAAD;AAC3B,UAAA,WAAW,EAAE,KAAKR,KAAL,CAAWQ,WADG;AAE3B,UAAA,KAAK,EAAE,KAAKR,KAAL,CAAWS,KAFS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFnC,CADJ,CAXJ,CAJJ,CADJ;AA6BH,OA9BI,MA+BA,IAAGE,IAAI,KAAK,GAAZ,EAAgB;AACjB,eACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BADJ,CADJ,EAII,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,EAEI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,GAAD;AAAK,UAAA,EAAE,EAAE;AAACoB,YAAAA,IAAI,EAAE,GAAP;AAAYC,YAAAA,MAAM,EAAE;AAApB,WAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACK,KAAKhC,KAAL,CAAWO,QAAX,IAAuB,oBAAC,mBAAD;AAAqB,UAAA,SAAS,EAAI,KAAKP,KAAL,CAAWM,SAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAD5B,EAEK,KAAKN,KAAL,CAAWQ,WAAX,GAAyB,CAAzB,IAA8B,oBAAC,uBAAD;AAC3B,UAAA,WAAW,EAAE,KAAKR,KAAL,CAAWQ,WADG;AAE3B,UAAA,KAAK,EAAE,KAAKR,KAAL,CAAWS,KAFS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFnC,CADJ,CAFJ,CAJJ,CADJ;AAoBH,OArBI,MAsBD;AACA,eACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCADJ,CADJ,EAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAJJ,CADJ;AAQH;AACJ;;;;EAnPiCpC,KAAK,CAAC6D,S;;AAuP5C,eAAe1C,uBAAf","sourcesContent":["import React from 'react';\r\nimport APIResponseErrorMessage from \"../commons/errorhandling/api-response-error-message\";\r\nimport {\r\n    Button,\r\n    Card,\r\n    CardHeader,\r\n    Col,\r\n    Modal,\r\n    ModalBody,\r\n    ModalHeader,\r\n    Row\r\n} from 'reactstrap';\r\nimport MedicationPlanForm from \"./medication-plan-form\";\r\n\r\nimport * as API_USERS from \"./medication-plan-api\"\r\nimport MedicationPlanTable from \"./medication-plan-table\";\r\nimport MedicationPlanRemoveForm from \"./medication-plan-remove-form\";\r\nimport MedicationPlanUpdateForm from \"./medication-plan-update-form\";\r\nimport AddMedForm from \"./medication-plan-add-med\";\r\nimport PatientContainer from \"../patient/patient-container\";\r\n\r\nconst buttonStyle = {\r\n    marginLeft:\"10px\"\r\n};\r\n\r\nclass MedicationPlanContainer extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.toggleForm = this.toggleForm.bind(this);\r\n        this.toggleRemove = this.toggleRemove.bind(this);\r\n        this.toggleUpdate = this.toggleUpdate.bind(this);\r\n        this.toggleAddMed = this.toggleAddMed.bind(this);\r\n        this.reload = this.reload.bind(this);\r\n        this.state = {\r\n            addMed: false,\r\n            removeMedicationPlan: false,\r\n            updateMedicationPlan: false,\r\n            selected: false,\r\n            collapseForm: false,\r\n            tableData: [],\r\n            isLoaded: false,\r\n            errorStatus: 0,\r\n            error: null\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchMedicationPlans();\r\n    }\r\n\r\n    async fetchMedicationPlans() {\r\n        let data = localStorage.getItem(\"role\");\r\n        if (data === \"0\" || data === \"1\") {\r\n            return API_USERS.getMedicationPlans((result, status, err) => {\r\n\r\n                if (result !== null && status === 200) {\r\n                    this.setState({\r\n                        tableData: result,\r\n                        isLoaded: true\r\n                    });\r\n                } else {\r\n                    this.setState(({\r\n                        errorStatus: status,\r\n                        error: err\r\n                    }));\r\n                }\r\n            });\r\n        } else if (data === \"2\") {\r\n            let name = localStorage.getItem(\"name\");\r\n            let medplanid = await this.getPatient(name);\r\n            let medplan = {\r\n                id: medplanid\r\n            };\r\n            console.log(\"ID IS: \" + medplanid);\r\n\r\n            await this.getMedPlan(medplan);\r\n        }\r\n    }\r\n\r\n    getMedPlan(medplan){\r\n        return new Promise((resolve, reject) => {\r\n            return API_USERS.getMedicationPlanByID(medplan, (result, status, err) => {\r\n\r\n                if (result !== null && status === 200) {\r\n                    this.setState({\r\n                        tableData: result,\r\n                        isLoaded: true\r\n                    });\r\n                } else {\r\n                    this.setState(({\r\n                        errorStatus: status,\r\n                        error: err\r\n                    }));\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    getPatient(name){\r\n        return new Promise((resolve, reject) => {\r\n            API_USERS.getPatient(name, (result, status, error) => {\r\n                if (result !== null && (status === 200 || status === 201)) {\r\n                    resolve(result.medplanid);\r\n                } else {\r\n                    reject(error);\r\n                }\r\n            })\r\n        });\r\n    }\r\n\r\n    toggleForm() {\r\n        this.setState({selected: !this.state.selected});\r\n    }\r\n\r\n    toggleRemove() {\r\n        this.setState({removeMedicationPlan: !this.state.removeMedicationPlan});\r\n    }\r\n\r\n    toggleUpdate() {\r\n        this.setState({updateMedicationPlan: !this.state.updateMedicationPlan});\r\n    }\r\n\r\n    toggleAddMed() {\r\n        this.setState({addMed: !this.state.addMed});\r\n    }\r\n\r\n\r\n    reload() {\r\n        this.setState({\r\n            isLoaded: false\r\n        });\r\n        this.setState({\r\n            addMed:false,\r\n            selected: false,\r\n            removeMedicationPlan: false,\r\n            updateMedicationPlan: false\r\n        });\r\n        this.fetchMedicationPlans();\r\n    }\r\n\r\n    render() {\r\n        let data = localStorage.getItem(\"role\");\r\n        if(data === \"0\"){\r\n            return (\r\n                <div>\r\n                    <CardHeader>\r\n                        <strong>Medication Plans</strong>\r\n                    </CardHeader>\r\n                    <Card>\r\n                        <br/>\r\n                        <Row>\r\n                            <Col sm={{size: '8', offset: 1}}>\r\n                                <Button color=\"primary\" onClick={this.toggleForm} style={buttonStyle}>Add Medication Plan</Button>\r\n                                <Button color=\"primary\" onClick={this.toggleRemove} style={buttonStyle}>Remove Medication Plan </Button>\r\n                                <Button color=\"primary\" onClick={this.toggleUpdate} style={buttonStyle}>Update Medication Plan</Button>\r\n                                <Button color=\"primary\" onClick={this.toggleAddMed} style={buttonStyle}>Add Medication to Plan</Button>\r\n                            </Col>\r\n                        </Row>\r\n                        <br/>\r\n                        <Row>\r\n                            <Col sm={{size: '8', offset: 1}}>\r\n                                {this.state.isLoaded && <MedicationPlanTable tableData = {this.state.tableData}/>}\r\n                                {this.state.errorStatus > 0 && <APIResponseErrorMessage\r\n                                    errorStatus={this.state.errorStatus}\r\n                                    error={this.state.error}\r\n                                />   }\r\n                            </Col>\r\n                        </Row>\r\n                    </Card>\r\n\r\n                    <Modal isOpen={this.state.selected} toggle={this.toggleForm}\r\n                           className={this.props.className} size=\"lg\">\r\n                        <ModalHeader toggle={this.toggleForm}> Add Medication Plan: </ModalHeader>\r\n                        <ModalBody>\r\n                            <MedicationPlanForm reloadHandler={this.reload}/>\r\n                        </ModalBody>\r\n                    </Modal>\r\n\r\n                    <Modal isOpen={this.state.removeMedicationPlan} toggle={this.toggleRemove}\r\n                           className={this.props.className} size=\"lg\">\r\n                        <ModalHeader toggle={this.toggleRemove}> Remove Medication Plan: </ModalHeader>\r\n                        <ModalBody>\r\n                            <MedicationPlanRemoveForm reloadHandler={this.reload}/>\r\n                        </ModalBody>\r\n                    </Modal>\r\n\r\n                    <Modal isOpen={this.state.updateMedicationPlan} toggle={this.toggleUpdate}\r\n                           className={this.props.className} size=\"lg\">\r\n                        <ModalHeader toggle={this.toggleUpdate}> Update Medication Plan: </ModalHeader>\r\n                        <ModalBody>\r\n                            <MedicationPlanUpdateForm reloadHandler={this.reload}/>\r\n                        </ModalBody>\r\n                    </Modal>\r\n\r\n                    <Modal isOpen={this.state.addMed} toggle={this.toggleAddMed}\r\n                           className={this.props.className} size=\"lg\">\r\n                        <ModalHeader toggle={this.toggleAddMed}> Add Medication to Plan: </ModalHeader>\r\n                        <ModalBody>\r\n                            <AddMedForm reloadHandler={this.reload}/>\r\n                        </ModalBody>\r\n                    </Modal>\r\n\r\n                </div>\r\n            )}\r\n        else if(data === \"1\"){\r\n            return (\r\n                <div>\r\n                    <CardHeader>\r\n                        <strong>Medication Plans</strong>\r\n                    </CardHeader>\r\n                    <Card>\r\n                        <br/>\r\n                        <Row>\r\n                            <Col sm={{size: '8', offset: 1}}>\r\n                                <Button color=\"primary\" onClick={this.toggleForm} style={buttonStyle}>Add Medication Plan</Button>\r\n                                <Button color=\"primary\" onClick={this.toggleRemove} style={buttonStyle}>Remove Medication Plan </Button>\r\n                                <Button color=\"primary\" onClick={this.toggleUpdate} style={buttonStyle}>Update Medication Plan</Button>\r\n                                <Button color=\"primary\" onClick={this.toggleAddMed} style={buttonStyle}>Add Medication to Plan</Button>\r\n                            </Col>\r\n                        </Row>\r\n                        <br/>\r\n                        <Row>\r\n                            <Col sm={{size: '8', offset: 1}}>\r\n                                {this.state.isLoaded && <MedicationPlanTable tableData = {this.state.tableData}/>}\r\n                                {this.state.errorStatus > 0 && <APIResponseErrorMessage\r\n                                    errorStatus={this.state.errorStatus}\r\n                                    error={this.state.error}\r\n                                />   }\r\n                            </Col>\r\n                        </Row>\r\n                    </Card>\r\n\r\n                </div>\r\n            )\r\n        }\r\n        else if(data === \"2\"){\r\n            return (\r\n                <div>\r\n                    <CardHeader>\r\n                        <strong>Medication Plans</strong>\r\n                    </CardHeader>\r\n                    <Card>\r\n                        <br/>\r\n                        <Row>\r\n                            <Col sm={{size: '8', offset: 1}}>\r\n                                {this.state.isLoaded && <MedicationPlanTable tableData = {this.state.tableData}/>}\r\n                                {this.state.errorStatus > 0 && <APIResponseErrorMessage\r\n                                    errorStatus={this.state.errorStatus}\r\n                                    error={this.state.error}\r\n                                />   }\r\n                            </Col>\r\n                        </Row>\r\n                    </Card>\r\n\r\n                </div>\r\n            )\r\n        }\r\n        else{\r\n            return (\r\n                <div>\r\n                    <CardHeader>\r\n                        <strong> Medication Plans </strong>\r\n                    </CardHeader>\r\n                    <h1>Access not allowed!</h1>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default MedicationPlanContainer;\r\n"]},"metadata":{},"sourceType":"module"}