{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\react-demo\\\\src\\\\login\\\\login-container.js\";\nimport React from 'react';\nimport BackgroundImg from '../commons/images/future-medicine.jpg';\nimport { Button, Container, Jumbotron } from 'reactstrap';\nimport LoginForm from \"./login-form\";\nimport * as API_USERS from \"./login-api\";\nimport { Redirect, withRouter } from 'react-router-dom';\nvar backgroundStyle = {\n  backgroundPosition: 'center',\n  backgroundSize: 'cover',\n  backgroundRepeat: 'no-repeat',\n  width: \"100%\",\n  height: \"1920px\",\n  backgroundImage: \"url(\".concat(BackgroundImg, \")\")\n};\nvar textStyle = {\n  color: 'white'\n};\nvar formStyle = {\n  color: 'black',\n  margin: 'auto',\n  width: '20%',\n  backgroundColor: 'white',\n  padding: '40px'\n};\n\nvar Login =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Login, _React$Component);\n\n  function Login(props) {\n    var _this;\n\n    _classCallCheck(this, Login);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Login).call(this, props));\n\n    _this.handleChange = function (event) {\n      var name = event.target.name;\n      var value = event.target.value;\n      var updatedControls = _this.state.formControls;\n      var updatedFormElement = updatedControls[name];\n      updatedFormElement.value = value;\n      updatedFormElement.touched = true; //updatedFormElement.valid = validate(value, updatedFormElement.validationRules);\n\n      updatedControls[name] = updatedFormElement;\n      var formIsValid = true;\n\n      for (var updatedFormElementName in updatedControls) {\n        formIsValid = updatedControls[updatedFormElementName].valid && formIsValid;\n      }\n\n      _this.setState({\n        formControls: updatedControls,\n        formIsValid: true\n      });\n    };\n\n    _this.toggleForm = _this.toggleForm.bind(_assertThisInitialized(_assertThisInitialized(_this))); //this.reloadHandler = this.props.reloadHandler;\n\n    _this.state = {\n      errorStatus: 0,\n      error: null,\n      formControls: {\n        username: {\n          value: '',\n          placeholder: '',\n          //valid: false,\n          touched: false\n        },\n        password: {\n          value: '',\n          placeholder: '',\n          //valid: false,\n          touched: false\n        }\n      }\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Login, [{\n    key: \"toggleForm\",\n    value: function toggleForm() {\n      this.setState({\n        collapseForm: !this.state.collapseForm\n      });\n    }\n  }, {\n    key: \"validateUser\",\n    value: function validateUser(person) {\n      var _this2 = this;\n\n      return API_USERS.postLogin(person, function (result, status, error) {\n        if (result !== null && (status === 200 || status === 201)) {\n          console.log(\"logiwwwwn succesfull\"); //this.reloadHandler();\n          //const { history } = this.props;\n          //history.push(\"/\")\n          //return <Redirect to='/target' />\n\n          _this2.context.history.push('/doctor');\n        } else {\n          _this2.setState({\n            errorStatus: status,\n            error: error\n          });\n        }\n      });\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit() {\n      var person = {\n        username: this.state.formControls.username.value,\n        password: this.state.formControls.password.value\n      };\n      console.log(person);\n      this.validateUser(person);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, React.createElement(Jumbotron, {\n        fluid: true,\n        style: backgroundStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, React.createElement(Container, {\n        fluid: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"display-3\",\n        style: textStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, \"Integrated Medical Monitoring Platform for Home-care assistance\"), React.createElement(\"h2\", {\n        style: formStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, \"Sign in\"), React.createElement(\"div\", {\n        style: formStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"username\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, \"Username:\"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"text\",\n        id: \"username\",\n        name: \"username\",\n        onChange: this.handleChange,\n        touched: this.state.formControls.username.touched ? 1 : 0,\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        htmlFor: \"password\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, \"Password:\"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"password\",\n        id: \"password\",\n        name: \"password\",\n        onChange: this.handleChange,\n        touched: this.state.formControls.password.touched ? 1 : 0,\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        onClick: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, \"Submit\")))));\n    }\n  }]);\n\n  return Login;\n}(React.Component);\n\nexport default withRouter(Login);","map":{"version":3,"sources":["C:\\Users\\user\\Desktop\\CSC - anul 2\\SD\\SpringPractice\\react-demo\\src\\login\\login-container.js"],"names":["React","BackgroundImg","Button","Container","Jumbotron","LoginForm","API_USERS","Redirect","withRouter","backgroundStyle","backgroundPosition","backgroundSize","backgroundRepeat","width","height","backgroundImage","textStyle","color","formStyle","margin","backgroundColor","padding","Login","props","handleChange","event","name","target","value","updatedControls","state","formControls","updatedFormElement","touched","formIsValid","updatedFormElementName","valid","setState","toggleForm","bind","errorStatus","error","username","placeholder","password","handleSubmit","collapseForm","person","postLogin","result","status","console","log","context","history","push","validateUser","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\n\r\nimport BackgroundImg from '../commons/images/future-medicine.jpg';\r\n\r\nimport {Button, Container, Jumbotron} from 'reactstrap';\r\nimport LoginForm from \"./login-form\";\r\nimport * as API_USERS from \"./login-api\";\r\nimport {Redirect, withRouter} from 'react-router-dom'\r\n\r\nconst backgroundStyle = {\r\n    backgroundPosition: 'center',\r\n    backgroundSize: 'cover',\r\n    backgroundRepeat: 'no-repeat',\r\n    width: \"100%\",\r\n    height: \"1920px\",\r\n    backgroundImage: `url(${BackgroundImg})`\r\n};\r\nconst textStyle = {color: 'white', };\r\nconst formStyle = {\r\n    color: 'black',\r\n    margin: 'auto',\r\n    width: '20%',\r\n    backgroundColor:'white',\r\n    padding: '40px',\r\n};\r\n\r\nclass Login extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.toggleForm = this.toggleForm.bind(this);\r\n        //this.reloadHandler = this.props.reloadHandler;\r\n\r\n        this.state = {\r\n            errorStatus: 0,\r\n            error: null,\r\n\r\n            formControls: {\r\n                username: {\r\n                    value: '',\r\n                    placeholder: '',\r\n                    //valid: false,\r\n                    touched: false,\r\n                },\r\n                password: {\r\n                    value: '',\r\n                    placeholder: '',\r\n                    //valid: false,\r\n                    touched: false,\r\n\r\n                },\r\n\r\n            }\r\n        };\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    toggleForm() {\r\n        this.setState({collapseForm: !this.state.collapseForm});\r\n    }\r\n\r\n    handleChange = event => {\r\n\r\n        const name = event.target.name;\r\n        const value = event.target.value;\r\n\r\n\r\n        const updatedControls = this.state.formControls;\r\n\r\n        const updatedFormElement = updatedControls[name];\r\n\r\n        updatedFormElement.value = value;\r\n        updatedFormElement.touched = true;\r\n        //updatedFormElement.valid = validate(value, updatedFormElement.validationRules);\r\n        updatedControls[name] = updatedFormElement;\r\n\r\n\r\n        let formIsValid = true;\r\n        for (let updatedFormElementName in updatedControls) {\r\n            formIsValid = updatedControls[updatedFormElementName].valid && formIsValid;\r\n        }\r\n\r\n        this.setState({\r\n            formControls: updatedControls,\r\n            formIsValid: true\r\n        });\r\n\r\n    };\r\n\r\n    validateUser(person) {\r\n\r\n        return API_USERS.postLogin(person, (result, status, error) => {\r\n\r\n\r\n            if (result !== null && (status === 200 || status === 201)) {\r\n                console.log(\"logiwwwwn succesfull\");\r\n                //this.reloadHandler();\r\n                //const { history } = this.props;\r\n                //history.push(\"/\")\r\n                //return <Redirect to='/target' />\r\n                this.context.history.push('/doctor');\r\n            } else {\r\n                this.setState(({\r\n                    errorStatus: status,\r\n                    error: error\r\n                }));\r\n            }\r\n        });\r\n    }\r\n\r\n    handleSubmit() {\r\n        let person = {\r\n            username: this.state.formControls.username.value,\r\n            password: this.state.formControls.password.value,\r\n        };\r\n        console.log(person);\r\n        this.validateUser(person);\r\n    }\r\n\r\n\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n\r\n            <div>\r\n                <Jumbotron fluid style={backgroundStyle}>\r\n                    <Container fluid >\r\n                        <h1 className=\"display-3\" style={textStyle}>Integrated Medical Monitoring Platform for Home-care assistance</h1>\r\n                        <h2 style={formStyle}>Sign in</h2 >\r\n                        <div style={formStyle}>\r\n                            <label htmlFor=\"username\">Username:</label><br></br>\r\n                            <input type=\"text\" id=\"username\" name=\"username\"\r\n                                   onChange={this.handleChange}\r\n                                   touched={this.state.formControls.username.touched? 1 : 0}\r\n                                   required\r\n                            ></input><br></br>\r\n                            <label htmlFor=\"password\">Password:</label><br></br>\r\n                            <input type=\"password\" id=\"password\" name=\"password\"\r\n                                   onChange={this.handleChange}\r\n                                   touched={this.state.formControls.password.touched? 1 : 0}\r\n                                   required\r\n                            ></input><br></br>\r\n                            <button onClick={this.handleSubmit}>Submit</button>\r\n                        </div>\r\n                    </Container>\r\n                </Jumbotron>\r\n            </div>\r\n        )\r\n    };\r\n}\r\n\r\nexport default withRouter(Login)"]},"metadata":{},"sourceType":"module"}