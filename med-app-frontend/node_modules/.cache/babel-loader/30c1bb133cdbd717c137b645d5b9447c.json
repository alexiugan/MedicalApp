{"ast":null,"code":"function performRequest(request, callback) {\n  console.log(request);\n  fetch(request).then(function (response) {\n    if (response.ok) {\n      response.json().then(function (json) {\n        return callback(json, response.status, null);\n      });\n      return \"true\";\n    } else {\n      response.json().then(function (err) {\n        return callback(null, response.status, err);\n      });\n      return \"false\";\n    }\n  }).catch(function (err) {\n    //catch any other unexpected error, and set custom code for error = 1\n    callback(null, 1, err);\n  });\n  return \"altceva\";\n}\n\nmodule.exports = {\n  performRequest: performRequest\n};","map":{"version":3,"sources":["C:\\Users\\user\\Desktop\\CSC - anul 2\\SD\\SpringPractice\\react-demo\\src\\commons\\api\\rest-client.js"],"names":["performRequest","request","callback","console","log","fetch","then","response","ok","json","status","err","catch","module","exports"],"mappings":"AAAA,SAASA,cAAT,CAAwBC,OAAxB,EAAiCC,QAAjC,EAA0C;AACtCC,EAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ;AACAI,EAAAA,KAAK,CAACJ,OAAD,CAAL,CACKK,IADL,CAEQ,UAASC,QAAT,EAAmB;AACf,QAAIA,QAAQ,CAACC,EAAb,EAAiB;AACbD,MAAAA,QAAQ,CAACE,IAAT,GAAgBH,IAAhB,CAAqB,UAAAG,IAAI;AAAA,eAAIP,QAAQ,CAACO,IAAD,EAAOF,QAAQ,CAACG,MAAhB,EAAuB,IAAvB,CAAZ;AAAA,OAAzB;AACA,aAAO,MAAP;AACH,KAHD,MAIK;AACDH,MAAAA,QAAQ,CAACE,IAAT,GAAgBH,IAAhB,CAAqB,UAAAK,GAAG;AAAA,eAAIT,QAAQ,CAAC,IAAD,EAAOK,QAAQ,CAACG,MAAhB,EAAyBC,GAAzB,CAAZ;AAAA,OAAxB;AACA,aAAO,OAAP;AACH;AACJ,GAXT,EAYKC,KAZL,CAYW,UAAUD,GAAV,EAAe;AAClB;AACAT,IAAAA,QAAQ,CAAC,IAAD,EAAO,CAAP,EAAUS,GAAV,CAAR;AACH,GAfL;AAgBA,SAAO,SAAP;AACH;;AACDE,MAAM,CAACC,OAAP,GAAiB;AACbd,EAAAA,cAAc,EAAdA;AADa,CAAjB","sourcesContent":["function performRequest(request, callback){\r\n    console.log(request);\r\n    fetch(request)\r\n        .then(\r\n            function(response) {\r\n                if (response.ok) {\r\n                    response.json().then(json => callback(json, response.status,null));\r\n                    return \"true\";\r\n                }\r\n                else {\r\n                    response.json().then(err => callback(null, response.status,  err));\r\n                    return \"false\";\r\n                }\r\n            })\r\n        .catch(function (err) {\r\n            //catch any other unexpected error, and set custom code for error = 1\r\n            callback(null, 1, err)\r\n        });\r\n    return \"altceva\";\r\n}\r\nmodule.exports = {\r\n    performRequest\r\n};\r\n"]},"metadata":{},"sourceType":"module"}