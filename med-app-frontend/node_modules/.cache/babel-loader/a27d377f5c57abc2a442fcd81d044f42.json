{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\med-app-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\med-app-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\med-app-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\med-app-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\med-app-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\med-app-frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\med-app-frontend\\\\src\\\\login\\\\login-form.js\";\nimport React from 'react';\nimport * as API_USERS from \"./login-api\";\nimport { Button, Form, Label, Input, Jumbotron, NavLink } from 'reactstrap';\nimport BackgroundImg from \"../commons/images/future-medicine.jpg\";\nimport Cookies from 'universal-cookie/es6/Cookies';\nimport { Link } from \"react-router-dom\";\nvar backgroundStyle = {\n  backgroundPosition: 'center',\n  backgroundSize: 'cover',\n  backgroundRepeat: 'no-repeat',\n  width: \"100%\",\n  height: \"1920px\",\n  backgroundImage: \"url(\".concat(BackgroundImg, \")\")\n};\nvar textStyle = {\n  fontSize: \"44px\",\n  color: 'white',\n  textAlign: 'center',\n  borderBottom: \"solid\",\n  borderWidth: \"2px\",\n  borderColor: \"lightgrey\",\n  padding: \"7px\",\n  marginBottom: \"10px\"\n};\nvar loginForm = {\n  borderRadius: \"10px\",\n  width: \"100%\",\n  maxWidth: \"330px\",\n  padding: \"15px\",\n  margin: \"auto\",\n  height: \"20%\",\n  backgroundColor: \"#708090\"\n};\nvar validMsg = {\n  textAlign: 'center',\n  marginBottom: \"5px\",\n  color: \"white\"\n};\nvar invalidMsg = {\n  textAlign: 'center',\n  marginBottom: \"5px\",\n  color: \"red\"\n};\nvar loginButton = {\n  display: 'inline-block',\n  width: \"40%\",\n  marginLeft: \"7%\",\n  height: \"15%\",\n  paddingTop: '12px',\n  paddingBottom: '12px',\n  paddingLeft: '28px',\n  paddingRight: '28px',\n  backgroundColor: \"black\"\n};\nvar registerButton = {\n  display: 'inline-block',\n  marginTop: \"20px\",\n  marginLeft: \"7%\",\n  backgroundColor: \"black\",\n  color: \"white\",\n  paddingTop: '10px',\n  paddingBottom: '14px',\n  paddingLeft: '32px',\n  paddingRight: '32px',\n  textDecoration: 'none',\n  boxSizing: 'border-box',\n  borderRadius: '6%'\n};\n\nvar LoginForm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(LoginForm, _React$Component);\n\n  function LoginForm(props) {\n    var _this;\n\n    _classCallCheck(this, LoginForm);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(LoginForm).call(this, props));\n\n    _this.handleChange = function (event) {\n      var name = event.target.name;\n      var value = event.target.value;\n      var updatedControls = _this.state.formControls;\n      var updatedFormElement = updatedControls[name];\n      updatedFormElement.value = value;\n      updatedFormElement.touched = true;\n      updatedControls[name] = updatedFormElement;\n      var formIsValid = true;\n\n      for (var updatedFormElementName in updatedControls) {\n        formIsValid = updatedControls[updatedFormElementName].valid && formIsValid;\n      }\n\n      _this.setState({\n        formControls: updatedControls,\n        formIsValid: true\n      });\n    };\n\n    _this.toggleForm = _this.toggleForm.bind(_assertThisInitialized(_assertThisInitialized(_this))); //this.reloadHandler = this.props.reloadHandler;\n\n    _this.state = {\n      errorStatus: 0,\n      error: null,\n      validMsg: '',\n      invalidMsg: '',\n      formControls: {\n        username: {\n          value: '',\n          placeholder: '',\n          //valid: false,\n          touched: false\n        },\n        password: {\n          value: '',\n          placeholder: '',\n          //valid: false,\n          touched: false\n        }\n      }\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(LoginForm, [{\n    key: \"toggleForm\",\n    value: function toggleForm() {\n      this.setState({\n        collapseForm: !this.state.collapseForm\n      });\n    }\n  }, {\n    key: \"verifyLogin\",\n    value: function verifyLogin(login) {\n      var _this2 = this;\n\n      return API_USERS.postLogin(login, function (result, status, error) {\n        if (result !== null && (status === 200 || status === 201)) {\n          _this2.setState({\n            validMsg: \"Login successful!\",\n            invalidMsg: \"\"\n          }); //this.reloadHandler();\n\n\n          switch (result.role) {\n            case 0:\n              {\n                localStorage.setItem(\"role\", \"0\");\n                break;\n              }\n\n            case 1:\n              {\n                localStorage.setItem(\"role\", \"1\");\n                break;\n              }\n\n            case 2:\n              {\n                localStorage.setItem(\"role\", \"2\");\n                break;\n              }\n          }\n\n          localStorage.setItem(\"name\", result.name);\n        } else {\n          _this2.setState({\n            errorStatus: status,\n            error: error,\n            invalidMsg: \"Invalid username or password!\",\n            validMsg: \"\"\n          });\n        }\n      });\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit() {\n      var login = {\n        username: this.state.formControls.username.value,\n        password: this.state.formControls.password.value\n      };\n      console.log(login);\n      this.verifyLogin(login);\n    }\n  }, {\n    key: \"initStorage\",\n    value: function initStorage() {\n      localStorage.setItem(\"role\", \"42\");\n      localStorage.setItem(\"name\", \"-\");\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      this.initStorage();\n      console.log(localStorage.getItem(\"name\")); // let cookie = new Cookies();\n      // cookie.set('role', 42);\n      // cookie.set('name', '-');\n      // console.log(\"Cookie: \" + cookie.get('role'));\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      }, React.createElement(Jumbotron, {\n        style: backgroundStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }, React.createElement(Form, {\n        style: loginForm,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        style: textStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      }, \"Login\"), React.createElement(\"div\", {\n        className: \"message\",\n        style: validMsg,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }, this.state.validMsg), React.createElement(\"div\", {\n        className: \"message\",\n        style: invalidMsg,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }, this.state.invalidMsg), React.createElement(Label, {\n        htmlFor: \"username\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      }, \" Username: \"), React.createElement(Input, {\n        type: \"text\",\n        name: \"username\",\n        id: \"username\",\n        onChange: this.handleChange,\n        touched: this.state.formControls.username.touched ? 1 : 0,\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }), React.createElement(Label, {\n        htmlFor: \"password\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      }, \" Password: \"), React.createElement(Input, {\n        name: \"password\",\n        id: \"password\",\n        type: \"password\",\n        onChange: this.handleChange,\n        touched: this.state.formControls.password.touched ? 1 : 0,\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225\n        },\n        __self: this\n      }), React.createElement(Button, {\n        style: loginButton,\n        onClick: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230\n        },\n        __self: this\n      }, \" Login \"), React.createElement(Link, {\n        to: \"/register\",\n        style: registerButton,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231\n        },\n        __self: this\n      }, \" Signup \"))));\n    }\n  }]);\n\n  return LoginForm;\n}(React.Component);\n\nexport default LoginForm;","map":{"version":3,"sources":["C:\\Users\\user\\Desktop\\CSC - anul 2\\SD\\SpringPractice\\med-app-frontend\\src\\login\\login-form.js"],"names":["React","API_USERS","Button","Form","Label","Input","Jumbotron","NavLink","BackgroundImg","Cookies","Link","backgroundStyle","backgroundPosition","backgroundSize","backgroundRepeat","width","height","backgroundImage","textStyle","fontSize","color","textAlign","borderBottom","borderWidth","borderColor","padding","marginBottom","loginForm","borderRadius","maxWidth","margin","backgroundColor","validMsg","invalidMsg","loginButton","display","marginLeft","paddingTop","paddingBottom","paddingLeft","paddingRight","registerButton","marginTop","textDecoration","boxSizing","LoginForm","props","handleChange","event","name","target","value","updatedControls","state","formControls","updatedFormElement","touched","formIsValid","updatedFormElementName","valid","setState","toggleForm","bind","errorStatus","error","username","placeholder","password","handleSubmit","collapseForm","login","postLogin","result","status","role","localStorage","setItem","console","log","verifyLogin","initStorage","getItem","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\n\r\nimport * as API_USERS from \"./login-api\";\r\n\r\nimport {Button, Form, Label, Input, Jumbotron, NavLink} from 'reactstrap';\r\n\r\nimport BackgroundImg from \"../commons/images/future-medicine.jpg\";\r\nimport Cookies from 'universal-cookie/es6/Cookies';\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst backgroundStyle = {\r\n    backgroundPosition: 'center',\r\n    backgroundSize: 'cover',\r\n    backgroundRepeat: 'no-repeat',\r\n    width: \"100%\",\r\n    height: \"1920px\",\r\n    backgroundImage: `url(${BackgroundImg})`\r\n};\r\n\r\nconst textStyle = {\r\n    fontSize: \"44px\",\r\n    color: 'white',\r\n    textAlign:'center',\r\n    borderBottom: \"solid\",\r\n    borderWidth: \"2px\",\r\n    borderColor: \"lightgrey\",\r\n    padding: \"7px\",\r\n    marginBottom:\"10px\"\r\n};\r\n\r\nconst loginForm = {\r\n    borderRadius: \"10px\",\r\n    width: \"100%\",\r\n    maxWidth: \"330px\",\r\n    padding: \"15px\",\r\n    margin: \"auto\",\r\n    height: \"20%\",\r\n    backgroundColor: \"#708090\"\r\n};\r\n\r\n\r\nconst validMsg = {\r\n    textAlign:'center',\r\n    marginBottom: \"5px\",\r\n    color: \"white\"\r\n};\r\n\r\nconst invalidMsg = {\r\n    textAlign:'center',\r\n    marginBottom: \"5px\",\r\n    color: \"red\"\r\n};\r\n\r\nconst loginButton = {\r\n    display: 'inline-block',\r\n    width: \"40%\",\r\n    marginLeft: \"7%\",\r\n    height: \"15%\",\r\n    paddingTop: '12px',\r\n    paddingBottom: '12px',\r\n    paddingLeft: '28px',\r\n    paddingRight: '28px',\r\n    backgroundColor: \"black\"\r\n};\r\n\r\nconst registerButton = {\r\n    display: 'inline-block',\r\n    marginTop: \"20px\",\r\n    marginLeft: \"7%\",\r\n    backgroundColor: \"black\",\r\n    color: \"white\",\r\n    paddingTop: '10px',\r\n    paddingBottom: '14px',\r\n    paddingLeft: '32px',\r\n    paddingRight: '32px',\r\n    textDecoration: 'none',\r\n    boxSizing: 'border-box',\r\n    borderRadius: '6%'\r\n};\r\n\r\nclass LoginForm extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.toggleForm = this.toggleForm.bind(this);\r\n        //this.reloadHandler = this.props.reloadHandler;\r\n\r\n        this.state = {\r\n\r\n            errorStatus: 0,\r\n            error: null,\r\n            validMsg: '',\r\n            invalidMsg: '',\r\n\r\n            formControls: {\r\n                username: {\r\n                    value: '',\r\n                    placeholder: '',\r\n                    //valid: false,\r\n                    touched: false,\r\n                },\r\n                password: {\r\n                    value: '',\r\n                    placeholder: '',\r\n                    //valid: false,\r\n                    touched: false,\r\n                },\r\n            }\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    toggleForm() {\r\n        this.setState({collapseForm: !this.state.collapseForm});\r\n    }\r\n\r\n\r\n    handleChange = event => {\r\n\r\n        const name = event.target.name;\r\n        const value = event.target.value;\r\n\r\n        const updatedControls = this.state.formControls;\r\n\r\n        const updatedFormElement = updatedControls[name];\r\n\r\n        updatedFormElement.value = value;\r\n        updatedFormElement.touched = true;\r\n\r\n        updatedControls[name] = updatedFormElement;\r\n\r\n        let formIsValid = true;\r\n        for (let updatedFormElementName in updatedControls) {\r\n            formIsValid = updatedControls[updatedFormElementName].valid && formIsValid;\r\n        }\r\n\r\n        this.setState({\r\n            formControls: updatedControls,\r\n            formIsValid: true\r\n        });\r\n\r\n    };\r\n\r\n    verifyLogin(login) {\r\n        return API_USERS.postLogin(login, (result, status, error) => {\r\n            if (result !== null && (status === 200 || status === 201)) {\r\n\r\n                this.setState({\r\n                    validMsg: \"Login successful!\",\r\n                    invalidMsg: \"\"\r\n                });\r\n                //this.reloadHandler();\r\n                switch (result.role){\r\n                    case 0: {\r\n                        localStorage.setItem(\"role\", \"0\");\r\n                        break;\r\n                    }\r\n                    case 1: {\r\n                        localStorage.setItem(\"role\", \"1\");\r\n                        break;\r\n                    }\r\n                    case 2: {\r\n                        localStorage.setItem(\"role\", \"2\");\r\n                        break;\r\n                    }\r\n                }\r\n                localStorage.setItem(\"name\", result.name);\r\n\r\n            } else {\r\n\r\n                this.setState(({\r\n                    errorStatus: status,\r\n                    error: error,\r\n                    invalidMsg: \"Invalid username or password!\",\r\n                    validMsg: \"\"\r\n                }));\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n    handleSubmit() {\r\n        let login = {\r\n            username: this.state.formControls.username.value,\r\n            password: this.state.formControls.password.value\r\n        };\r\n\r\n        console.log(login);\r\n        this.verifyLogin(login);\r\n\r\n    }\r\n\r\n    initStorage(){\r\n    localStorage.setItem(\"role\", \"42\");\r\n    localStorage.setItem(\"name\", \"-\");\r\n    }\r\n\r\n\r\n    render() {\r\n        this.initStorage();\r\n        console.log(localStorage.getItem(\"name\"));\r\n        // let cookie = new Cookies();\r\n        // cookie.set('role', 42);\r\n        // cookie.set('name', '-');\r\n        // console.log(\"Cookie: \" + cookie.get('role'));\r\n        return (\r\n            <div>\r\n                <Jumbotron style={backgroundStyle}>\r\n                    <Form style={loginForm}>\r\n                        <h1 style={textStyle}>Login</h1>\r\n                        <div className=\"message\" style={validMsg}>{this.state.validMsg}</div>\r\n                        <div className=\"message\" style={invalidMsg}>{this.state.invalidMsg}</div>\r\n\r\n                        <Label htmlFor='username'> Username: </Label>\r\n                        <Input type='text' name='username' id='username'\r\n                               onChange={this.handleChange}\r\n                               touched={this.state.formControls.username.touched? 1 : 0}\r\n                               required\r\n                        />\r\n\r\n\r\n                        <Label htmlFor='password'> Password: </Label>\r\n                        <Input name='password' id='password' type='password'\r\n                               onChange={this.handleChange}\r\n                               touched={this.state.formControls.password.touched? 1 : 0}\r\n                               required\r\n                        />\r\n                        <Button style={loginButton} onClick={this.handleSubmit}> Login </Button>\r\n                        <Link to={`/register`} style={registerButton}> Signup </Link>\r\n\r\n                    </Form>\r\n\r\n\r\n                </Jumbotron>\r\n            </div>\r\n        ) ;\r\n    }\r\n}\r\n\r\nexport default LoginForm;"]},"metadata":{},"sourceType":"module"}