{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\react-demo\\\\src\\\\login\\\\login-form.js\";\nimport React from 'react';\nimport Button from \"react-bootstrap/Button\";\nimport * as API_USERS from \"./login-api\";\nimport { Col, Row } from \"reactstrap\";\nimport { FormGroup, Input, Label } from 'reactstrap';\n\nvar LoginForm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(LoginForm, _React$Component);\n\n  function LoginForm(props) {\n    var _this;\n\n    _classCallCheck(this, LoginForm);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(LoginForm).call(this, props));\n\n    _this.handleChange = function (event) {\n      var name = event.target.name;\n      var value = event.target.value;\n      var updatedControls = _this.state.formControls;\n      var updatedFormElement = updatedControls[name];\n      updatedFormElement.value = value;\n      updatedFormElement.touched = true;\n      updatedControls[name] = updatedFormElement;\n      var formIsValid = true;\n\n      for (var updatedFormElementName in updatedControls) {\n        formIsValid = updatedControls[updatedFormElementName].valid && formIsValid;\n      }\n\n      _this.setState({\n        formControls: updatedControls,\n        formIsValid: formIsValid\n      });\n    };\n\n    _this.toggleForm = _this.toggleForm.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.reloadHandler = _this.props.reloadHandler;\n    _this.state = {\n      errorStatus: 0,\n      error: null,\n      formIsValid: false,\n      formControls: {\n        name: {\n          value: '',\n          placeholder: 'What is your name?...',\n          valid: false,\n          touched: false,\n          validationRules: {\n            minLength: 3,\n            isRequired: true\n          }\n        },\n        email: {\n          value: '',\n          placeholder: 'Email...',\n          valid: false,\n          touched: false,\n          validationRules: {\n            emailValidator: true\n          }\n        },\n        age: {\n          value: '',\n          placeholder: 'Age...',\n          valid: false,\n          touched: false\n        },\n        address: {\n          value: '',\n          placeholder: 'Cluj, Zorilor, Str. Lalelelor 21...',\n          valid: false,\n          touched: false\n        }\n      }\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(LoginForm, [{\n    key: \"toggleForm\",\n    value: function toggleForm() {\n      this.setState({\n        collapseForm: !this.state.collapseForm\n      });\n    }\n  }, {\n    key: \"registerPerson\",\n    value: function registerPerson(person) {\n      var _this2 = this;\n\n      return API_USERS.postPerson(person, function (result, status, error) {\n        if (result !== null && (status === 200 || status === 201)) {\n          console.log(\"Successfully inserted person with id: \" + result);\n\n          _this2.reloadHandler();\n        } else {\n          _this2.setState({\n            errorStatus: status,\n            error: error\n          });\n        }\n      });\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit() {\n      var person = {\n        name: this.state.formControls.name.value,\n        email: this.state.formControls.email.value,\n        age: this.state.formControls.age.value,\n        address: this.state.formControls.address.value\n      };\n      console.log(person);\n      this.registerPerson(person);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        id: \"name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"nameField\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, \" Username: \"), React.createElement(Input, {\n        name: \"name\",\n        id: \"nameField\",\n        onChange: this.handleChange,\n        defaultValue: '',\n        touched: this.state.formControls.name.touched ? 1 : 0,\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      })), React.createElement(FormGroup, {\n        id: \"pass\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"passField\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, \" Password: \"), React.createElement(Input, {\n        name: \"pass\",\n        id: \"passField\",\n        type: \"password\",\n        onChange: this.handleChange,\n        defaultValue: '',\n        touched: this.state.formControls.email.touched ? 1 : 0,\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      })), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, React.createElement(Col, {\n        sm: {\n          size: '4',\n          offset: 8\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, React.createElement(Button, {\n        type: \"submit\",\n        disabled: !this.state.formIsValid,\n        onClick: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, \"  Login \"))));\n    }\n  }]);\n\n  return LoginForm;\n}(React.Component);\n\nexport default LoginForm;","map":{"version":3,"sources":["C:\\Users\\user\\Desktop\\CSC - anul 2\\SD\\SpringPractice\\react-demo\\src\\login\\login-form.js"],"names":["React","Button","API_USERS","Col","Row","FormGroup","Input","Label","LoginForm","props","handleChange","event","name","target","value","updatedControls","state","formControls","updatedFormElement","touched","formIsValid","updatedFormElementName","valid","setState","toggleForm","bind","reloadHandler","errorStatus","error","placeholder","validationRules","minLength","isRequired","email","emailValidator","age","address","handleSubmit","collapseForm","person","postPerson","result","status","console","log","registerPerson","size","offset","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Button from \"react-bootstrap/Button\";\r\nimport * as API_USERS from \"./login-api\";\r\n\r\nimport {Col, Row} from \"reactstrap\";\r\nimport { FormGroup, Input, Label} from 'reactstrap';\r\n\r\n\r\n\r\nclass LoginForm extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.toggleForm = this.toggleForm.bind(this);\r\n        this.reloadHandler = this.props.reloadHandler;\r\n\r\n        this.state = {\r\n\r\n            errorStatus: 0,\r\n            error: null,\r\n\r\n            formIsValid: false,\r\n\r\n            formControls: {\r\n                name: {\r\n                    value: '',\r\n                    placeholder: 'What is your name?...',\r\n                    valid: false,\r\n                    touched: false,\r\n                    validationRules: {\r\n                        minLength: 3,\r\n                        isRequired: true\r\n                    }\r\n                },\r\n                email: {\r\n                    value: '',\r\n                    placeholder: 'Email...',\r\n                    valid: false,\r\n                    touched: false,\r\n                    validationRules: {\r\n                        emailValidator: true\r\n                    }\r\n                },\r\n                age: {\r\n                    value: '',\r\n                    placeholder: 'Age...',\r\n                    valid: false,\r\n                    touched: false,\r\n                },\r\n                address: {\r\n                    value: '',\r\n                    placeholder: 'Cluj, Zorilor, Str. Lalelelor 21...',\r\n                    valid: false,\r\n                    touched: false,\r\n                },\r\n            }\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    toggleForm() {\r\n        this.setState({collapseForm: !this.state.collapseForm});\r\n    }\r\n\r\n\r\n    handleChange = event => {\r\n\r\n        const name = event.target.name;\r\n        const value = event.target.value;\r\n\r\n        const updatedControls = this.state.formControls;\r\n\r\n        const updatedFormElement = updatedControls[name];\r\n\r\n        updatedFormElement.value = value;\r\n        updatedFormElement.touched = true;\r\n\r\n        updatedControls[name] = updatedFormElement;\r\n\r\n        let formIsValid = true;\r\n        for (let updatedFormElementName in updatedControls) {\r\n            formIsValid = updatedControls[updatedFormElementName].valid && formIsValid;\r\n        }\r\n\r\n        this.setState({\r\n            formControls: updatedControls,\r\n            formIsValid: formIsValid\r\n        });\r\n\r\n    };\r\n\r\n    registerPerson(person) {\r\n        return API_USERS.postPerson(person, (result, status, error) => {\r\n            if (result !== null && (status === 200 || status === 201)) {\r\n                console.log(\"Successfully inserted person with id: \" + result);\r\n                this.reloadHandler();\r\n            } else {\r\n                this.setState(({\r\n                    errorStatus: status,\r\n                    error: error\r\n                }));\r\n            }\r\n        });\r\n    }\r\n\r\n    handleSubmit() {\r\n        let person = {\r\n            name: this.state.formControls.name.value,\r\n            email: this.state.formControls.email.value,\r\n            age: this.state.formControls.age.value,\r\n            address: this.state.formControls.address.value\r\n        };\r\n\r\n        console.log(person);\r\n        this.registerPerson(person);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n\r\n                <FormGroup id='name'>\r\n                    <Label for='nameField'> Username: </Label>\r\n                    <Input name='name' id='nameField'\r\n                           onChange={this.handleChange}\r\n                           defaultValue={''}\r\n                           touched={this.state.formControls.name.touched? 1 : 0}\r\n                           required\r\n                    />\r\n\r\n                </FormGroup>\r\n\r\n                <FormGroup id='pass'>\r\n                    <Label for='passField'> Password: </Label>\r\n                    <Input name='pass' id='passField' type='password'\r\n                           onChange={this.handleChange}\r\n                           defaultValue={''}\r\n                           touched={this.state.formControls.email.touched? 1 : 0}\r\n                           required\r\n                    />\r\n                </FormGroup>\r\n\r\n\r\n                    <Row>\r\n                        <Col sm={{size: '4', offset: 8}}>\r\n                            <Button type={\"submit\"} disabled={!this.state.formIsValid} onClick={this.handleSubmit}>  Login </Button>\r\n                        </Col>\r\n                    </Row>\r\n\r\n            </div>\r\n        ) ;\r\n    }\r\n}\r\n\r\nexport default LoginForm;\r\n"]},"metadata":{},"sourceType":"module"}