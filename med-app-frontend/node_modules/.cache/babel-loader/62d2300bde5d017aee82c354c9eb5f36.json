{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\react-demo\\\\src\\\\login\\\\login-form.js\";\nimport React from 'react';\nimport * as API_USERS from \"./login-api\";\nimport { Button, Form, FormGroup, Label, Input, Container, Jumbotron, Row, Col } from 'reactstrap';\nimport BackgroundImg from \"../commons/images/future-medicine.jpg\";\nvar backgroundStyle = {\n  backgroundPosition: 'center',\n  backgroundSize: 'cover',\n  backgroundRepeat: 'no-repeat',\n  width: \"100%\",\n  height: \"1920px\",\n  backgroundImage: \"url(\".concat(BackgroundImg, \")\")\n};\nvar textStyle = {\n  fontSize: \"44px\",\n  color: 'white',\n  textAlign: 'center',\n  borderBottom: \"solid\",\n  borderWidth: \"2px\",\n  borderColor: \"lightgrey\",\n  padding: \"7px\",\n  marginBottom: \"10px\"\n};\nvar loginForm = {\n  borderRadius: \"10px\",\n  width: \"100%\",\n  maxWidth: \"330px\",\n  padding: \"15px\",\n  margin: \"auto\",\n  height: \"23%\",\n  backgroundColor: \"#708090\"\n};\nvar validMsg = {\n  textAlign: 'center',\n  marginBottom: \"5px\",\n  color: \"white\"\n};\nvar invalidMsg = {\n  textAlign: 'center',\n  marginBottom: \"5px\",\n  color: \"red\"\n};\nvar button = {\n  width: \"60%\",\n  marginTop: \"40px\",\n  marginLeft: \"20%\",\n  height: \"15%\",\n  backgroundColor: \"black\"\n};\n\nvar LoginForm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(LoginForm, _React$Component);\n\n  function LoginForm(props) {\n    var _this;\n\n    _classCallCheck(this, LoginForm);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(LoginForm).call(this, props));\n\n    _this.handleChange = function (event) {\n      var name = event.target.name;\n      var value = event.target.value;\n      var updatedControls = _this.state.formControls;\n      var updatedFormElement = updatedControls[name];\n      updatedFormElement.value = value;\n      updatedFormElement.touched = true;\n      updatedControls[name] = updatedFormElement;\n      var formIsValid = true;\n\n      for (var updatedFormElementName in updatedControls) {\n        formIsValid = updatedControls[updatedFormElementName].valid && formIsValid;\n      }\n\n      _this.setState({\n        formControls: updatedControls,\n        formIsValid: true\n      });\n    };\n\n    _this.toggleForm = _this.toggleForm.bind(_assertThisInitialized(_assertThisInitialized(_this))); //this.reloadHandler = this.props.reloadHandler;\n\n    _this.state = {\n      errorStatus: 0,\n      error: null,\n      //formIsValid: false,\n      formControls: {\n        username: {\n          value: '',\n          placeholder: '',\n          //valid: false,\n          touched: false\n        },\n        password: {\n          value: '',\n          placeholder: '',\n          //valid: false,\n          touched: false\n        },\n        validMsg: {\n          value: '',\n          placeholder: '',\n          //valid: false,\n          touched: false\n        },\n        invalidMsg: {\n          value: '',\n          placeholder: '',\n          //valid: false,\n          touched: false\n        }\n      }\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(LoginForm, [{\n    key: \"toggleForm\",\n    value: function toggleForm() {\n      this.setState({\n        collapseForm: !this.state.collapseForm\n      });\n    }\n  }, {\n    key: \"registerPerson\",\n    value: function registerPerson(person) {\n      var _this2 = this;\n\n      return API_USERS.postPerson(person, function (result, status, error) {\n        if (result !== null && (status === 200 || status === 201)) {\n          console.log(\"Successfully inserted person with id: \" + result);\n\n          _this2.reloadHandler();\n        } else {\n          _this2.setState({\n            errorStatus: status,\n            error: error\n          });\n        }\n      });\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit() {\n      var person = {\n        name: this.state.formControls.name.value,\n        email: this.state.formControls.email.value,\n        age: this.state.formControls.age.value,\n        address: this.state.formControls.address.value\n      };\n      console.log(person);\n      this.registerPerson(person);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, React.createElement(Jumbotron, {\n        style: backgroundStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }, React.createElement(Form, {\n        style: loginForm,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        style: textStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, \"Login\"), React.createElement(Label, {\n        htmlFor: \"nameField\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, \" Username: \"), React.createElement(Input, {\n        type: \"text\",\n        name: \"username\",\n        id: \"usernameField\",\n        onChange: this.handleChange,\n        touched: this.state.formControls.name.touched ? 1 : 0,\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }), React.createElement(Label, {\n        htmlFor: \"password\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }, \" Password: \"), React.createElement(Input, {\n        name: \"password\",\n        id: \"passwordField\",\n        type: \"password\",\n        onChange: this.handleChange,\n        defaultValue: '' //touched={this.state.formControls.email.touched? 1 : 0}\n        ,\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }), React.createElement(Button, {\n        fluid: true,\n        style: button,\n        type: \"submit\",\n        disabled: !this.state.formIsValid,\n        onClick: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }, \"  Login \"))));\n    }\n  }]);\n\n  return LoginForm;\n}(React.Component);\n\nexport default LoginForm;","map":{"version":3,"sources":["C:\\Users\\user\\Desktop\\CSC - anul 2\\SD\\SpringPractice\\react-demo\\src\\login\\login-form.js"],"names":["React","API_USERS","Button","Form","FormGroup","Label","Input","Container","Jumbotron","Row","Col","BackgroundImg","backgroundStyle","backgroundPosition","backgroundSize","backgroundRepeat","width","height","backgroundImage","textStyle","fontSize","color","textAlign","borderBottom","borderWidth","borderColor","padding","marginBottom","loginForm","borderRadius","maxWidth","margin","backgroundColor","validMsg","invalidMsg","button","marginTop","marginLeft","LoginForm","props","handleChange","event","name","target","value","updatedControls","state","formControls","updatedFormElement","touched","formIsValid","updatedFormElementName","valid","setState","toggleForm","bind","errorStatus","error","username","placeholder","password","handleSubmit","collapseForm","person","postPerson","result","status","console","log","reloadHandler","email","age","address","registerPerson","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\n\r\nimport * as API_USERS from \"./login-api\";\r\n\r\nimport {Button, Form, FormGroup, Label, Input, Container, Jumbotron, Row, Col} from 'reactstrap';\r\n\r\nimport BackgroundImg from \"../commons/images/future-medicine.jpg\";\r\n\r\n\r\nconst backgroundStyle = {\r\n    backgroundPosition: 'center',\r\n    backgroundSize: 'cover',\r\n    backgroundRepeat: 'no-repeat',\r\n    width: \"100%\",\r\n    height: \"1920px\",\r\n    backgroundImage: `url(${BackgroundImg})`\r\n};\r\nconst textStyle = {\r\n    fontSize: \"44px\",\r\n    color: 'white',\r\n    textAlign:'center',\r\n    borderBottom: \"solid\",\r\n    borderWidth: \"2px\",\r\n    borderColor: \"lightgrey\",\r\n    padding: \"7px\",\r\n    marginBottom:\"10px\"\r\n};\r\n\r\nconst loginForm = {\r\n    borderRadius: \"10px\",\r\n    width: \"100%\",\r\n    maxWidth: \"330px\",\r\n    padding: \"15px\",\r\n    margin: \"auto\",\r\n    height: \"23%\",\r\n    backgroundColor: \"#708090\"\r\n};\r\n\r\n\r\nconst validMsg = {\r\n    textAlign:'center',\r\n    marginBottom: \"5px\",\r\n    color: \"white\"\r\n};\r\n\r\nconst invalidMsg = {\r\n    textAlign:'center',\r\n    marginBottom: \"5px\",\r\n    color: \"red\"\r\n};\r\n\r\nconst button = {\r\n    width: \"60%\",\r\n    marginTop: \"40px\",\r\n    marginLeft: \"20%\",\r\n    height: \"15%\",\r\n    backgroundColor: \"black\"\r\n};\r\n\r\nclass LoginForm extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.toggleForm = this.toggleForm.bind(this);\r\n        //this.reloadHandler = this.props.reloadHandler;\r\n\r\n        this.state = {\r\n\r\n            errorStatus: 0,\r\n            error: null,\r\n\r\n            //formIsValid: false,\r\n\r\n            formControls: {\r\n                username: {\r\n                    value: '',\r\n                    placeholder: '',\r\n                    //valid: false,\r\n                    touched: false,\r\n                },\r\n                password: {\r\n                    value: '',\r\n                    placeholder: '',\r\n                    //valid: false,\r\n                    touched: false,\r\n                },\r\n                validMsg: {\r\n                    value: '',\r\n                    placeholder: '',\r\n                    //valid: false,\r\n                    touched: false,\r\n                },\r\n                invalidMsg: {\r\n                    value: '',\r\n                    placeholder: '',\r\n                    //valid: false,\r\n                    touched: false,\r\n                },\r\n            }\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    toggleForm() {\r\n        this.setState({collapseForm: !this.state.collapseForm});\r\n    }\r\n\r\n\r\n    handleChange = event => {\r\n\r\n        const name = event.target.name;\r\n        const value = event.target.value;\r\n\r\n        const updatedControls = this.state.formControls;\r\n\r\n        const updatedFormElement = updatedControls[name];\r\n\r\n        updatedFormElement.value = value;\r\n        updatedFormElement.touched = true;\r\n\r\n        updatedControls[name] = updatedFormElement;\r\n\r\n        let formIsValid = true;\r\n        for (let updatedFormElementName in updatedControls) {\r\n            formIsValid = updatedControls[updatedFormElementName].valid && formIsValid;\r\n        }\r\n\r\n        this.setState({\r\n            formControls: updatedControls,\r\n            formIsValid: true\r\n        });\r\n\r\n    };\r\n\r\n    registerPerson(person) {\r\n        return API_USERS.postPerson(person, (result, status, error) => {\r\n            if (result !== null && (status === 200 || status === 201)) {\r\n                console.log(\"Successfully inserted person with id: \" + result);\r\n                this.reloadHandler();\r\n            } else {\r\n                this.setState(({\r\n                    errorStatus: status,\r\n                    error: error\r\n                }));\r\n            }\r\n        });\r\n    }\r\n\r\n    handleSubmit() {\r\n        let person = {\r\n            name: this.state.formControls.name.value,\r\n            email: this.state.formControls.email.value,\r\n            age: this.state.formControls.age.value,\r\n            address: this.state.formControls.address.value\r\n        };\r\n\r\n        console.log(person);\r\n        this.registerPerson(person);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Jumbotron style={backgroundStyle}>\r\n                    <Form style={loginForm}>\r\n                        <h1 style={textStyle}>Login</h1>\r\n\r\n                        <Label htmlFor='nameField'> Username: </Label>\r\n                        <Input type='text' name='username' id='usernameField'\r\n                               onChange={this.handleChange}\r\n                               touched={this.state.formControls.name.touched? 1 : 0}\r\n                               required\r\n                        />\r\n\r\n\r\n                        <Label htmlFor='password'> Password: </Label>\r\n                        <Input name='password' id='passwordField' type='password'\r\n                               onChange={this.handleChange}\r\n                               defaultValue={''}\r\n                               //touched={this.state.formControls.email.touched? 1 : 0}\r\n                               required\r\n                        />\r\n\r\n\r\n                        <Button fluid style={button} type={\"submit\"} disabled={!this.state.formIsValid} onClick={this.handleSubmit}>  Login </Button>\r\n\r\n                    </Form>\r\n\r\n\r\n                </Jumbotron>\r\n            </div>\r\n        ) ;\r\n    }\r\n}\r\n\r\nexport default LoginForm;\r\n"]},"metadata":{},"sourceType":"module"}