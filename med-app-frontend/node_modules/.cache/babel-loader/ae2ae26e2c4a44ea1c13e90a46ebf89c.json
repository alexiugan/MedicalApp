{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\react-demo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\CSC - anul 2\\\\SD\\\\SpringPractice\\\\react-demo\\\\src\\\\home\\\\home.js\";\nimport React from 'react';\nimport BackgroundImg from '../commons/images/future-medicine.jpg';\nimport { Button, Form, FormGroup, Label, Input, Container, Jumbotron } from 'reactstrap';\nimport { HOST } from \"../commons/hosts\";\nimport RestApiClient from \"../commons/api/rest-client\";\nimport * as API_USERS from \"../person/api/person-api\";\nimport validate from \"../person/components/validators/person-validators\";\nvar backgroundStyle = {\n  backgroundPosition: 'center',\n  backgroundSize: 'cover',\n  backgroundRepeat: 'no-repeat',\n  width: \"100%\",\n  height: \"1920px\",\n  backgroundImage: \"url(\".concat(BackgroundImg, \")\")\n};\nvar textStyle = {\n  fontSize: \"44px\",\n  color: 'white',\n  textAlign: 'center',\n  borderBottom: \"solid\",\n  borderWidth: \"2px\",\n  borderColor: \"lightgrey\",\n  padding: \"7px\",\n  marginBottom: \"10px\"\n};\nvar loginForm = {\n  borderRadius: \"10px\",\n  width: \"100%\",\n  maxWidth: \"330px\",\n  padding: \"15px\",\n  margin: \"auto\",\n  height: \"23%\",\n  backgroundColor: \"#708090\"\n};\nvar validMsg = {\n  textAlign: 'center',\n  marginBottom: \"5px\",\n  color: \"white\"\n};\nvar invalidMsg = {\n  textAlign: 'center',\n  marginBottom: \"5px\",\n  color: \"red\"\n};\nvar button = {\n  width: \"60%\",\n  marginTop: \"20px\",\n  marginLeft: \"20%\",\n  height: \"35%\",\n  backgroundColor: \"black\"\n};\nvar endpoint = {\n  login: '/users/login'\n};\n\nvar Home =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Home, _React$Component);\n\n  function Home(props) {\n    var _this;\n\n    _classCallCheck(this, Home);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Home).call(this, props)); //this.toggleForm = this.toggleForm.bind(this);\n\n    _this.handleChange = function (event) {\n      // const name = event.target.name;\n      var value = event.target.value;\n      var updatedControls = _this.state.formControls; //const updatedFormElement = updatedControls[name];\n      //updatedFormElement.value = value;\n      // updatedFormElement.touched = true;\n      //updatedFormElement.valid = validate(value, updatedFormElement.validationRules);\n      //updatedControls[name] = updatedFormElement;\n\n      var formIsValid = true; //  for (let updatedFormElementName in updatedControls) {\n      //       formIsValid = updatedControls[updatedFormElementName].valid && formIsValid;\n      //   }\n\n      _this.setState({\n        //formControls: updatedControls,\n        formIsValid: formIsValid\n      });\n    };\n\n    _this.state = {\n      errorStatus: 0,\n      error: null,\n      formControls: {\n        username: {\n          value: '',\n          placeholder: '',\n          touched: true\n        },\n        password: {\n          value: '',\n          placeholder: '',\n          touched: true\n        }\n      }\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    /*\r\n            this.updateUsername = this.updateUsername.bind(this);\r\n            this.updatePassword = this.updatePassword.bind(this);\r\n            this.updateMsgGood = this.updateMsgGood.bind(this);\r\n            this.updateMsgBad = this.updateMsgBad.bind(this);\r\n            this.onSubmit = this.onSubmit.bind(this);*/\n\n    return _this;\n  }\n\n  _createClass(Home, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Jumbotron, {\n        fluid: true,\n        style: backgroundStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, React.createElement(Form, {\n        className: \"login-form\",\n        style: loginForm,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, React.createElement(Container, {\n        fluid: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"display-3\",\n        style: textStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, \"Login\"), React.createElement(\"div\", {\n        className: \"message\",\n        style: validMsg,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, this.state.validMsg), React.createElement(\"div\", {\n        className: \"message\",\n        style: invalidMsg,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, this.state.invalidMsg), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, React.createElement(Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, \"Username\"), React.createElement(Input, {\n        value: this.state.formControls.username,\n        onChange: this.handleChange(),\n        type: \"text\",\n        name: \"username\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      })), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, React.createElement(Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, \"Password\"), React.createElement(Input, {\n        value: this.state.formControls.password,\n        onChange: this.handleChange(),\n        type: \"password\",\n        name: \"password\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      })), React.createElement(Button, {\n        style: button,\n        onClick: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, \"Login\"))));\n    }\n  }, {\n    key: \"validateUser\",\n    value: function validateUser(person) {\n      var _this2 = this;\n\n      return this.postLogin(person, function (result, status, error) {\n        if (result !== null && (status === 200 || status === 201)) {\n          console.log(\"Login succesfull\"); //this.reloadHandler();\n        } else {\n          _this2.setState({\n            errorStatus: status,\n            error: error\n          });\n        }\n      });\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit() {\n      var person = {\n        username: this.state.formControls.username.value,\n        password: this.state.formControls.password.value\n      };\n      console.log(person);\n      this.registerPerson(person);\n    }\n  }, {\n    key: \"postLogin\",\n    value: function postLogin(person, callback) {\n      var request = new Request(HOST.backend_api + endpoint.person, {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(person)\n      });\n      console.log(\"URL: \" + request.url);\n      RestApiClient.performRequest(request, callback);\n    }\n    /*\r\n        updateUsername(evt) {\r\n            this.setState({\r\n                username: evt.target.value\r\n            });\r\n        }\r\n    \r\n        updatePassword(evt) {\r\n            this.setState({\r\n                password: evt.target.value\r\n            });\r\n        }\r\n    \r\n        updateMsgGood(evt) {\r\n            this.setState({\r\n                validMsg: \"Login successfull!\",\r\n                invalidMsg: \"\"\r\n            });\r\n        }\r\n    \r\n        updateMsgBad(evt) {\r\n            this.setState({\r\n                invalidMsg: \"Invalid username or password!\",\r\n                validMsg: \"\"\r\n            });\r\n        }\r\n    \r\n        onSubmit(){\r\n            let login = {\r\n                username: this.state.formControls.username.value,\r\n                password: this.state.formControls.password.value\r\n            };\r\n            this.checkLogin(login);\r\n        }\r\n    \r\n    \r\n        checkLogin(login){\r\n    \r\n            return this.sendRequest(login, (result, status, err) => {\r\n                console.log(status);\r\n                console.log(\"Result = \" + result);\r\n                if (result !== null && (status === 200 || status === 201)) {\r\n                    this.updateMsgGood();\r\n                } else {\r\n                    console.log(\"There was an error \" + err);\r\n                    this.updateMsgBad();\r\n                }\r\n            });\r\n        }\r\n    \r\n        sendRequest(login, callback){\r\n            let request = new Request(HOST.backend_api + endpoint.login + \"/login\", {\r\n                method: 'POST',\r\n                headers : {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(login)\r\n            });\r\n            console.log(request.url);\r\n            console.log(login);\r\n            RestApiClient.performRequest(request, callback, login);\r\n        }*/\n\n  }]);\n\n  return Home;\n}(React.Component);\n\nexport default Home;","map":{"version":3,"sources":["C:\\Users\\user\\Desktop\\CSC - anul 2\\SD\\SpringPractice\\react-demo\\src\\home\\home.js"],"names":["React","BackgroundImg","Button","Form","FormGroup","Label","Input","Container","Jumbotron","HOST","RestApiClient","API_USERS","validate","backgroundStyle","backgroundPosition","backgroundSize","backgroundRepeat","width","height","backgroundImage","textStyle","fontSize","color","textAlign","borderBottom","borderWidth","borderColor","padding","marginBottom","loginForm","borderRadius","maxWidth","margin","backgroundColor","validMsg","invalidMsg","button","marginTop","marginLeft","endpoint","login","Home","props","handleChange","event","value","target","updatedControls","state","formControls","formIsValid","setState","errorStatus","error","username","placeholder","touched","password","bind","handleSubmit","person","postLogin","result","status","console","log","registerPerson","callback","request","Request","backend_api","method","headers","body","JSON","stringify","url","performRequest","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport BackgroundImg from '../commons/images/future-medicine.jpg';\r\n\r\nimport {Button, Form, FormGroup, Label, Input, Container, Jumbotron} from 'reactstrap';\r\nimport {HOST} from \"../commons/hosts\";\r\nimport RestApiClient from \"../commons/api/rest-client\";\r\nimport * as API_USERS from \"../person/api/person-api\";\r\nimport validate from \"../person/components/validators/person-validators\";\r\n\r\n\r\nconst backgroundStyle = {\r\n    backgroundPosition: 'center',\r\n    backgroundSize: 'cover',\r\n    backgroundRepeat: 'no-repeat',\r\n    width: \"100%\",\r\n    height: \"1920px\",\r\n    backgroundImage: `url(${BackgroundImg})`\r\n};\r\nconst textStyle = {\r\n    fontSize: \"44px\",\r\n    color: 'white',\r\n    textAlign:'center',\r\n    borderBottom: \"solid\",\r\n    borderWidth: \"2px\",\r\n    borderColor: \"lightgrey\",\r\n    padding: \"7px\",\r\n    marginBottom:\"10px\"\r\n};\r\n\r\nconst loginForm = {\r\n    borderRadius: \"10px\",\r\n    width: \"100%\",\r\n    maxWidth: \"330px\",\r\n    padding: \"15px\",\r\n    margin: \"auto\",\r\n    height: \"23%\",\r\n    backgroundColor: \"#708090\"\r\n};\r\n\r\n\r\nconst validMsg = {\r\n    textAlign:'center',\r\n    marginBottom: \"5px\",\r\n    color: \"white\"\r\n};\r\n\r\nconst invalidMsg = {\r\n    textAlign:'center',\r\n    marginBottom: \"5px\",\r\n    color: \"red\"\r\n};\r\n\r\nconst button = {\r\n    width: \"60%\",\r\n    marginTop: \"20px\",\r\n    marginLeft: \"20%\",\r\n    height: \"35%\",\r\n    backgroundColor: \"black\"\r\n};\r\n\r\nconst endpoint = {\r\n    login: '/users/login'\r\n};\r\n\r\n\r\nclass Home extends React.Component {\r\n\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        //this.toggleForm = this.toggleForm.bind(this);\r\n\r\n\r\n        this.state = {\r\n\r\n            errorStatus: 0,\r\n            error: null,\r\n\r\n\r\n            formControls: {\r\n                username: {\r\n                    value: '',\r\n                    placeholder: '',\r\n                    touched: true,\r\n                },\r\n                password: {\r\n                    value: '',\r\n                    placeholder: '',\r\n                    touched: true\r\n                },\r\n            }\r\n        };\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n/*\r\n        this.updateUsername = this.updateUsername.bind(this);\r\n        this.updatePassword = this.updatePassword.bind(this);\r\n        this.updateMsgGood = this.updateMsgGood.bind(this);\r\n        this.updateMsgBad = this.updateMsgBad.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);*/\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Jumbotron fluid style={backgroundStyle}>\r\n                <Form className=\"login-form\" style={loginForm}>\r\n\r\n                    <Container fluid>\r\n                        <h1 className=\"display-3\" style={textStyle}>Login</h1>\r\n                        <div className=\"message\" style={validMsg}>{this.state.validMsg}</div>\r\n                        <div className=\"message\" style={invalidMsg}>{this.state.invalidMsg}</div>\r\n                        <FormGroup>\r\n                            <Label>Username</Label>\r\n                            <Input value={this.state.formControls.username} onChange={this.handleChange()} type=\"text\" name=\"username\"/>\r\n                        </FormGroup>\r\n\r\n                        <FormGroup>\r\n                            <Label>Password</Label>\r\n                            <Input value={this.state.formControls.password} onChange={this.handleChange()} type=\"password\" name=\"password\"/>\r\n                        </FormGroup>\r\n                        <Button style={button} onClick={this.handleSubmit}>Login</Button>\r\n                    </Container>\r\n\r\n\r\n                </Form>\r\n            </Jumbotron>\r\n        )\r\n    };\r\n\r\n\r\n\r\n\r\n    handleChange = event => {\r\n\r\n       // const name = event.target.name;\r\n        const value = event.target.value;\r\n\r\n        const updatedControls = this.state.formControls;\r\n\r\n        //const updatedFormElement = updatedControls[name];\r\n\r\n        //updatedFormElement.value = value;\r\n       // updatedFormElement.touched = true;\r\n        //updatedFormElement.valid = validate(value, updatedFormElement.validationRules);\r\n        //updatedControls[name] = updatedFormElement;\r\n\r\n        let formIsValid = true;\r\n      //  for (let updatedFormElementName in updatedControls) {\r\n     //       formIsValid = updatedControls[updatedFormElementName].valid && formIsValid;\r\n     //   }\r\n\r\n        this.setState({\r\n            //formControls: updatedControls,\r\n            formIsValid: formIsValid\r\n        });\r\n\r\n    };\r\n\r\n    validateUser(person) {\r\n        return this.postLogin(person, (result, status, error) => {\r\n            if (result !== null && (status === 200 || status === 201)) {\r\n                console.log(\"Login succesfull\");\r\n                //this.reloadHandler();\r\n            } else {\r\n                this.setState(({\r\n                    errorStatus: status,\r\n                    error: error\r\n                }));\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n\r\n\r\n    handleSubmit() {\r\n        let person = {\r\n            username: this.state.formControls.username.value,\r\n            password: this.state.formControls.password.value,\r\n           };\r\n\r\n        console.log(person);\r\n        this.registerPerson(person);\r\n    }\r\n\r\n     postLogin(person, callback){\r\n        let request = new Request(HOST.backend_api + endpoint.person , {\r\n            method: 'POST',\r\n            headers : {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(person)\r\n        });\r\n\r\n        console.log(\"URL: \" + request.url);\r\n        RestApiClient.performRequest(request, callback);\r\n\r\n    }\r\n/*\r\n    updateUsername(evt) {\r\n        this.setState({\r\n            username: evt.target.value\r\n        });\r\n    }\r\n\r\n    updatePassword(evt) {\r\n        this.setState({\r\n            password: evt.target.value\r\n        });\r\n    }\r\n\r\n    updateMsgGood(evt) {\r\n        this.setState({\r\n            validMsg: \"Login successfull!\",\r\n            invalidMsg: \"\"\r\n        });\r\n    }\r\n\r\n    updateMsgBad(evt) {\r\n        this.setState({\r\n            invalidMsg: \"Invalid username or password!\",\r\n            validMsg: \"\"\r\n        });\r\n    }\r\n\r\n    onSubmit(){\r\n        let login = {\r\n            username: this.state.formControls.username.value,\r\n            password: this.state.formControls.password.value\r\n        };\r\n        this.checkLogin(login);\r\n    }\r\n\r\n\r\n    checkLogin(login){\r\n\r\n        return this.sendRequest(login, (result, status, err) => {\r\n            console.log(status);\r\n            console.log(\"Result = \" + result);\r\n            if (result !== null && (status === 200 || status === 201)) {\r\n                this.updateMsgGood();\r\n            } else {\r\n                console.log(\"There was an error \" + err);\r\n                this.updateMsgBad();\r\n            }\r\n        });\r\n    }\r\n\r\n    sendRequest(login, callback){\r\n        let request = new Request(HOST.backend_api + endpoint.login + \"/login\", {\r\n            method: 'POST',\r\n            headers : {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(login)\r\n        });\r\n        console.log(request.url);\r\n        console.log(login);\r\n        RestApiClient.performRequest(request, callback, login);\r\n    }*/\r\n}\r\n\r\n\r\n\r\nexport default Home\r\n"]},"metadata":{},"sourceType":"module"}